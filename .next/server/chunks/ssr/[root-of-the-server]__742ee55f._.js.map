{"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_a71539c9.module.css [app-rsc] (css module)","turbopack:///[next]/internal/font/google/geist_a71539c9.js","turbopack:///[next]/internal/font/google/geist_mono_8d43a2aa.module.css [app-rsc] (css module)","turbopack:///[next]/internal/font/google/geist_mono_8d43a2aa.js","turbopack:///[project]/src/components/theme/theme-provider.tsx/__nextjs-internal-proxy.mjs","turbopack:///[project]/src/components/layout/main-nav.tsx/__nextjs-internal-proxy.mjs","turbopack:///[project]/src/contexts/cart-context.tsx/__nextjs-internal-proxy.mjs","turbopack:///[project]/src/contexts/auth-context.tsx/__nextjs-internal-proxy.mjs","turbopack:///[project]/src/generated/prisma/internal/class.ts","turbopack:///[project]/src/generated/prisma/internal/prismaNamespace.ts","turbopack:///[project]/src/generated/prisma/enums.ts","turbopack:///[project]/src/generated/prisma/client.ts","turbopack:///[project]/src/lib/prisma.ts","turbopack:///[project]/src/server/repositories/base-repository.ts","turbopack:///[project]/src/server/repositories/user-repository.ts","turbopack:///[project]/src/server/errors/base-error.ts","turbopack:///[project]/src/server/services/user-service.ts","turbopack:///[project]/src/lib/init-admin.ts","turbopack:///[project]/src/app/layout.tsx"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"geist_a71539c9-module__T19VSG__className\",\n  \"variable\": \"geist_a71539c9-module__T19VSG__variable\",\n});\n","import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Geist%22,%22arguments%22:[{%22variable%22:%22--font-geist-sans%22,%22subsets%22:[%22latin%22]}],%22variableName%22:%22geistSans%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Geist', 'Geist Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n","__turbopack_context__.v({\n  \"className\": \"geist_mono_8d43a2aa-module__8Li5zG__className\",\n  \"variable\": \"geist_mono_8d43a2aa-module__8Li5zG__variable\",\n});\n","import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Geist_Mono%22,%22arguments%22:[{%22variable%22:%22--font-geist-mono%22,%22subsets%22:[%22latin%22]}],%22variableName%22:%22geistMono%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Geist Mono', 'Geist Mono Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n","// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const ThemeProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call ThemeProvider() from the server but ThemeProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/theme/theme-provider.tsx\",\n    \"ThemeProvider\",\n);\n","// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const MainNav = registerClientReference(\n    function() { throw new Error(\"Attempted to call MainNav() from the server but MainNav is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/layout/main-nav.tsx\",\n    \"MainNav\",\n);\n","// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const CartProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call CartProvider() from the server but CartProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/contexts/cart-context.tsx\",\n    \"CartProvider\",\n);\nexport const useCart = registerClientReference(\n    function() { throw new Error(\"Attempted to call useCart() from the server but useCart is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/contexts/cart-context.tsx\",\n    \"useCart\",\n);\n","// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const AuthProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call AuthProvider() from the server but AuthProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/contexts/auth-context.tsx\",\n    \"AuthProvider\",\n);\nexport const useAuth = registerClientReference(\n    function() { throw new Error(\"Attempted to call useAuth() from the server but useAuth is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/contexts/auth-context.tsx\",\n    \"useAuth\",\n);\n","\n/* !!! This is code generated by Prisma. Do not edit directly. !!! */\n/* eslint-disable */\n// @ts-nocheck \n/*\n * WARNING: This is an internal file that is subject to change!\n *\n * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘\n *\n * Please import the `PrismaClient` class from the `client.ts` file instead.\n */\n\nimport * as runtime from \"@prisma/client/runtime/library\"\nimport type * as Prisma from \"./prismaNamespace\"\n\n\nconst config: runtime.GetPrismaClientConfig = {\n  \"generator\": {\n    \"name\": \"client\",\n    \"provider\": {\n      \"fromEnvVar\": null,\n      \"value\": \"prisma-client\"\n    },\n    \"output\": {\n      \"value\": \"D:\\\\Project-to-update-CV\\\\HRK\\\\src\\\\generated\\\\prisma\",\n      \"fromEnvVar\": null\n    },\n    \"config\": {\n      \"engineType\": \"library\"\n    },\n    \"binaryTargets\": [\n      {\n        \"fromEnvVar\": null,\n        \"value\": \"windows\",\n        \"native\": true\n      }\n    ],\n    \"previewFeatures\": [],\n    \"sourceFilePath\": \"D:\\\\Project-to-update-CV\\\\HRK\\\\prisma\\\\schema.prisma\",\n    \"isCustomOutput\": true\n  },\n  \"relativePath\": \"../../../prisma\",\n  \"clientVersion\": \"6.18.0\",\n  \"engineVersion\": \"34b5a692b7bd79939a9a2c3ef97d816e749cda2f\",\n  \"datasourceNames\": [\n    \"db\"\n  ],\n  \"activeProvider\": \"mongodb\",\n  \"inlineDatasources\": {\n    \"db\": {\n      \"url\": {\n        \"fromEnvVar\": \"DATABASE_URL\",\n        \"value\": null\n      }\n    }\n  },\n  \"inlineSchema\": \"// This is your Prisma schema file,\\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\\n\\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\\n\\ngenerator client {\\n  provider = \\\"prisma-client\\\"\\n  output   = \\\"../src/generated/prisma\\\"\\n}\\n\\ndatasource db {\\n  provider = \\\"mongodb\\\"\\n  url      = env(\\\"DATABASE_URL\\\")\\n}\\n\\nenum UserRole {\\n  CUSTOMER\\n  ADMIN\\n}\\n\\nmodel User {\\n  id       String   @id @default(auto()) @map(\\\"_id\\\") @db.ObjectId\\n  email    String   @unique\\n  name     String?\\n  image    String? // relative public path to user image, e.g. /uploads/users/xxx.jpg\\n  password String\\n  role     UserRole @default(CUSTOMER)\\n  orders   Order[]\\n}\\n\\nmodel Category {\\n  id        String    @id @default(auto()) @map(\\\"_id\\\") @db.ObjectId\\n  name      String    @unique\\n  createdAt DateTime  @default(now())\\n  updatedAt DateTime  @updatedAt\\n  products  Product[]\\n}\\n\\nmodel Product {\\n  id            String         @id @default(auto()) @map(\\\"_id\\\") @db.ObjectId\\n  name          String\\n  description   String?\\n  image         String? // relative public path to product image, e.g. /uploads/products/xxx.jpg\\n  price         Float\\n  stock         Int\\n  category      Category       @relation(fields: [categoryId], references: [id])\\n  categoryId    String         @db.ObjectId\\n  orderProducts OrderProduct[]\\n}\\n\\nenum OrderStatus {\\n  PENDING\\n  PROCESSING\\n  COMPLETED\\n  CANCELLED\\n}\\n\\nenum TableStatus {\\n  AVAILABLE\\n  OCCUPIED\\n  RESERVED\\n}\\n\\nmodel Table {\\n  id        String      @id @default(auto()) @map(\\\"_id\\\") @db.ObjectId\\n  number    Int         @unique\\n  status    TableStatus @default(AVAILABLE)\\n  token     String?     @unique // Encrypted token for QR code check-in\\n  qrCode    String? // Base64 QR code image data\\n  createdAt DateTime    @default(now())\\n  updatedAt DateTime    @updatedAt\\n  orders    Order[]\\n}\\n\\nmodel Order {\\n  id          String         @id @default(auto()) @map(\\\"_id\\\") @db.ObjectId\\n  user        User?          @relation(fields: [userId], references: [id])\\n  userId      String?        @db.ObjectId\\n  table       Table?         @relation(fields: [tableId], references: [id])\\n  tableId     String?        @db.ObjectId\\n  tableNumber Int? // For tracking table number\\n  products    OrderProduct[]\\n  total       Float\\n  status      OrderStatus    @default(PENDING)\\n  createdAt   DateTime       @default(now())\\n  updatedAt   DateTime       @updatedAt\\n}\\n\\nmodel OrderProduct {\\n  id        String  @id @default(auto()) @map(\\\"_id\\\") @db.ObjectId\\n  order     Order   @relation(fields: [orderId], references: [id])\\n  orderId   String  @db.ObjectId\\n  product   Product @relation(fields: [productId], references: [id])\\n  productId String  @db.ObjectId\\n  quantity  Int\\n}\\n\",\n  \"inlineSchemaHash\": \"d362401f83d90344b18e5a32ac5cad2a510dd6bc2cd5fa41787ac551fc081e27\",\n  \"copyEngine\": true,\n  \"runtimeDataModel\": {\n    \"models\": {},\n    \"enums\": {},\n    \"types\": {}\n  },\n  \"dirname\": \"\"\n}\n\nconfig.runtimeDataModel = JSON.parse(\"{\\\"models\\\":{\\\"User\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"dbName\\\":\\\"_id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"ObjectId\\\",[]],\\\"default\\\":{\\\"name\\\":\\\"auto\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"email\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"name\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"image\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"password\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"role\\\",\\\"kind\\\":\\\"enum\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"UserRole\\\",\\\"nativeType\\\":null,\\\"default\\\":\\\"CUSTOMER\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"orders\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Order\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"OrderToUser\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"Category\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"dbName\\\":\\\"_id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"ObjectId\\\",[]],\\\"default\\\":{\\\"name\\\":\\\"auto\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"name\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"products\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Product\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"CategoryToProduct\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"Product\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"dbName\\\":\\\"_id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"ObjectId\\\",[]],\\\"default\\\":{\\\"name\\\":\\\"auto\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"name\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"description\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"image\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"price\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Float\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"stock\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"category\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Category\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"CategoryToProduct\\\",\\\"relationFromFields\\\":[\\\"categoryId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"categoryId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"ObjectId\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"orderProducts\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"OrderProduct\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"OrderProductToProduct\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"Table\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"dbName\\\":\\\"_id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"ObjectId\\\",[]],\\\"default\\\":{\\\"name\\\":\\\"auto\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"number\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"enum\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"TableStatus\\\",\\\"nativeType\\\":null,\\\"default\\\":\\\"AVAILABLE\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"token\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"qrCode\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"orders\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Order\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"OrderToTable\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"Order\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"dbName\\\":\\\"_id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"ObjectId\\\",[]],\\\"default\\\":{\\\"name\\\":\\\"auto\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"user\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"User\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"OrderToUser\\\",\\\"relationFromFields\\\":[\\\"userId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"userId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"ObjectId\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"table\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Table\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"OrderToTable\\\",\\\"relationFromFields\\\":[\\\"tableId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"tableId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"ObjectId\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"tableNumber\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"products\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"OrderProduct\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"OrderToOrderProduct\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"total\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Float\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"enum\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"OrderStatus\\\",\\\"nativeType\\\":null,\\\"default\\\":\\\"PENDING\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"OrderProduct\\\":{\\\"dbName\\\":null,\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"dbName\\\":\\\"_id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"ObjectId\\\",[]],\\\"default\\\":{\\\"name\\\":\\\"auto\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"order\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Order\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"OrderToOrderProduct\\\",\\\"relationFromFields\\\":[\\\"orderId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"orderId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"ObjectId\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"product\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Product\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"OrderProductToProduct\\\",\\\"relationFromFields\\\":[\\\"productId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"productId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"ObjectId\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"quantity\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false}},\\\"enums\\\":{\\\"UserRole\\\":{\\\"values\\\":[{\\\"name\\\":\\\"CUSTOMER\\\",\\\"dbName\\\":null},{\\\"name\\\":\\\"ADMIN\\\",\\\"dbName\\\":null}],\\\"dbName\\\":null},\\\"OrderStatus\\\":{\\\"values\\\":[{\\\"name\\\":\\\"PENDING\\\",\\\"dbName\\\":null},{\\\"name\\\":\\\"PROCESSING\\\",\\\"dbName\\\":null},{\\\"name\\\":\\\"COMPLETED\\\",\\\"dbName\\\":null},{\\\"name\\\":\\\"CANCELLED\\\",\\\"dbName\\\":null}],\\\"dbName\\\":null},\\\"TableStatus\\\":{\\\"values\\\":[{\\\"name\\\":\\\"AVAILABLE\\\",\\\"dbName\\\":null},{\\\"name\\\":\\\"OCCUPIED\\\",\\\"dbName\\\":null},{\\\"name\\\":\\\"RESERVED\\\",\\\"dbName\\\":null}],\\\"dbName\\\":null}},\\\"types\\\":{}}\")\nconfig.engineWasm = undefined\nconfig.compilerWasm = undefined\n\n\n\n\nexport type LogOptions<ClientOptions extends Prisma.PrismaClientOptions> =\n  'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never\n\nexport interface PrismaClientConstructor {\n    /**\n   * ## Prisma Client\n   * \n   * Type-safe database client for TypeScript\n   * @example\n   * ```\n   * const prisma = new PrismaClient()\n   * // Fetch zero or more Users\n   * const users = await prisma.user.findMany()\n   * ```\n   * \n   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).\n   */\n\n  new <\n    Options extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,\n    LogOpts extends LogOptions<Options> = LogOptions<Options>,\n    OmitOpts extends Prisma.PrismaClientOptions['omit'] = Options extends { omit: infer U } ? U : Prisma.PrismaClientOptions['omit'],\n    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs\n  >(options?: Prisma.Subset<Options, Prisma.PrismaClientOptions> ): PrismaClient<LogOpts, OmitOpts, ExtArgs>\n}\n\n/**\n * ## Prisma Client\n * \n * Type-safe database client for TypeScript\n * @example\n * ```\n * const prisma = new PrismaClient()\n * // Fetch zero or more Users\n * const users = await prisma.user.findMany()\n * ```\n * \n * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).\n */\n\nexport interface PrismaClient<\n  in LogOpts extends Prisma.LogLevel = never,\n  in out OmitOpts extends Prisma.PrismaClientOptions['omit'] = Prisma.PrismaClientOptions['omit'],\n  in out ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs\n> {\n  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }\n\n  $on<V extends LogOpts>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;\n\n  /**\n   * Connect with the database\n   */\n  $connect(): runtime.Types.Utils.JsPromise<void>;\n\n  /**\n   * Disconnect from the database\n   */\n  $disconnect(): runtime.Types.Utils.JsPromise<void>;\n\n/**\n   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.\n   * @example\n   * ```\n   * const [george, bob, alice] = await prisma.$transaction([\n   *   prisma.user.create({ data: { name: 'George' } }),\n   *   prisma.user.create({ data: { name: 'Bob' } }),\n   *   prisma.user.create({ data: { name: 'Alice' } }),\n   * ])\n   * ```\n   * \n   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).\n   */\n  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): runtime.Types.Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>\n\n  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => runtime.Types.Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): runtime.Types.Utils.JsPromise<R>\n\n  /**\n   * Executes a raw MongoDB command and returns the result of it.\n   * @example\n   * ```\n   * const user = await prisma.$runCommandRaw({\n   *   aggregate: 'User',\n   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],\n   *   explain: false,\n   * })\n   * ```\n   * \n   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).\n   */\n  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>\n\n  $extends: runtime.Types.Extensions.ExtendsHook<\"extends\", Prisma.TypeMapCb<OmitOpts>, ExtArgs, runtime.Types.Utils.Call<Prisma.TypeMapCb<OmitOpts>, {\n    extArgs: ExtArgs\n  }>>\n\n      /**\n   * `prisma.user`: Exposes CRUD operations for the **User** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Users\n    * const users = await prisma.user.findMany()\n    * ```\n    */\n  get user(): Prisma.UserDelegate<ExtArgs, { omit: OmitOpts }>;\n\n  /**\n   * `prisma.category`: Exposes CRUD operations for the **Category** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Categories\n    * const categories = await prisma.category.findMany()\n    * ```\n    */\n  get category(): Prisma.CategoryDelegate<ExtArgs, { omit: OmitOpts }>;\n\n  /**\n   * `prisma.product`: Exposes CRUD operations for the **Product** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Products\n    * const products = await prisma.product.findMany()\n    * ```\n    */\n  get product(): Prisma.ProductDelegate<ExtArgs, { omit: OmitOpts }>;\n\n  /**\n   * `prisma.table`: Exposes CRUD operations for the **Table** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Tables\n    * const tables = await prisma.table.findMany()\n    * ```\n    */\n  get table(): Prisma.TableDelegate<ExtArgs, { omit: OmitOpts }>;\n\n  /**\n   * `prisma.order`: Exposes CRUD operations for the **Order** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Orders\n    * const orders = await prisma.order.findMany()\n    * ```\n    */\n  get order(): Prisma.OrderDelegate<ExtArgs, { omit: OmitOpts }>;\n\n  /**\n   * `prisma.orderProduct`: Exposes CRUD operations for the **OrderProduct** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more OrderProducts\n    * const orderProducts = await prisma.orderProduct.findMany()\n    * ```\n    */\n  get orderProduct(): Prisma.OrderProductDelegate<ExtArgs, { omit: OmitOpts }>;\n}\n\nexport function getPrismaClientClass(dirname: string): PrismaClientConstructor {\n  config.dirname = dirname\n  return runtime.getPrismaClient(config) as unknown as PrismaClientConstructor\n}\n","\n/* !!! This is code generated by Prisma. Do not edit directly. !!! */\n/* eslint-disable */\n// @ts-nocheck \n/*\n * WARNING: This is an internal file that is subject to change!\n *\n * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘\n *\n * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.\n * While this enables partial backward compatibility, it is not part of the stable public API.\n *\n * If you are looking for your Models, Enums, and Input Types, please import them from the respective\n * model files in the `model` directory!\n */\n\nimport * as runtime from \"@prisma/client/runtime/library\"\nimport type * as Prisma from \"../models\"\nimport { type PrismaClient } from \"./class\"\n\nexport type * from '../models'\n\nexport type DMMF = typeof runtime.DMMF\n\nexport type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>\n\n/**\n * Prisma Errors\n */\n\nexport const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError\nexport type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError\n\nexport const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError\nexport type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError\n\nexport const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError\nexport type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError\n\nexport const PrismaClientInitializationError = runtime.PrismaClientInitializationError\nexport type PrismaClientInitializationError = runtime.PrismaClientInitializationError\n\nexport const PrismaClientValidationError = runtime.PrismaClientValidationError\nexport type PrismaClientValidationError = runtime.PrismaClientValidationError\n\n/**\n * Re-export of sql-template-tag\n */\nexport const sql = runtime.sqltag\nexport const empty = runtime.empty\nexport const join = runtime.join\nexport const raw = runtime.raw\nexport const Sql = runtime.Sql\nexport type Sql = runtime.Sql\n\n\n\n/**\n * Decimal.js\n */\nexport const Decimal = runtime.Decimal\nexport type Decimal = runtime.Decimal\n\nexport type DecimalJsLike = runtime.DecimalJsLike\n\n/**\n * Metrics\n */\nexport type Metrics = runtime.Metrics\nexport type Metric<T> = runtime.Metric<T>\nexport type MetricHistogram = runtime.MetricHistogram\nexport type MetricHistogramBucket = runtime.MetricHistogramBucket\n\n/**\n* Extensions\n*/\nexport type Extension = runtime.Types.Extensions.UserArgs\nexport const getExtensionContext = runtime.Extensions.getExtensionContext\nexport type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>\nexport type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>\nexport type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>\nexport type Exact<A, W> = runtime.Types.Public.Exact<A, W>\n\nexport type PrismaVersion = {\n  client: string\n  engine: string\n}\n\n/**\n * Prisma Client JS version: 6.18.0\n * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f\n */\nexport const prismaVersion: PrismaVersion = {\n  client: \"6.18.0\",\n  engine: \"34b5a692b7bd79939a9a2c3ef97d816e749cda2f\"\n}\n\n/**\n * Utility Types\n */\n\nexport type Bytes = runtime.Bytes\nexport type JsonObject = runtime.JsonObject\nexport type JsonArray = runtime.JsonArray\nexport type JsonValue = runtime.JsonValue\nexport type InputJsonObject = runtime.InputJsonObject\nexport type InputJsonArray = runtime.InputJsonArray\nexport type InputJsonValue = runtime.InputJsonValue\n\n\nexport const NullTypes = {\n  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),\n  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),\n  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),\n}\n/**\n * Helper for filtering JSON entries that have `null` on the database (empty on the db)\n *\n * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field\n */\nexport const DbNull = runtime.objectEnumValues.instances.DbNull\n/**\n * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)\n *\n * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field\n */\nexport const JsonNull = runtime.objectEnumValues.instances.JsonNull\n/**\n * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`\n *\n * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field\n */\nexport const AnyNull = runtime.objectEnumValues.instances.AnyNull\n\n\ntype SelectAndInclude = {\n  select: any\n  include: any\n}\n\ntype SelectAndOmit = {\n  select: any\n  omit: any\n}\n\n/**\n * From T, pick a set of properties whose keys are in the union K\n */\ntype Prisma__Pick<T, K extends keyof T> = {\n    [P in K]: T[P];\n};\n\nexport type Enumerable<T> = T | Array<T>;\n\n/**\n * Subset\n * @desc From `T` pick properties that exist in `U`. Simple version of Intersection\n */\nexport type Subset<T, U> = {\n  [key in keyof T]: key extends keyof U ? T[key] : never;\n};\n\n/**\n * SelectSubset\n * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.\n * Additionally, it validates, if both select and include are present. If the case, it errors.\n */\nexport type SelectSubset<T, U> = {\n  [key in keyof T]: key extends keyof U ? T[key] : never\n} &\n  (T extends SelectAndInclude\n    ? 'Please either choose `select` or `include`.'\n    : T extends SelectAndOmit\n      ? 'Please either choose `select` or `omit`.'\n      : {})\n\n/**\n * Subset + Intersection\n * @desc From `T` pick properties that exist in `U` and intersect `K`\n */\nexport type SubsetIntersection<T, U, K> = {\n  [key in keyof T]: key extends keyof U ? T[key] : never\n} &\n  K\n\ntype Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };\n\n/**\n * XOR is needed to have a real mutually exclusive union type\n * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types\n */\nexport type XOR<T, U> =\n  T extends object ?\n  U extends object ?\n    (Without<T, U> & U) | (Without<U, T> & T)\n  : U : T\n\n\n/**\n * Is T a Record?\n */\ntype IsObject<T extends any> = T extends Array<any>\n? False\n: T extends Date\n? False\n: T extends Uint8Array\n? False\n: T extends BigInt\n? False\n: T extends object\n? True\n: False\n\n\n/**\n * If it's T[], return T\n */\nexport type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T\n\n/**\n * From ts-toolbelt\n */\n\ntype __Either<O extends object, K extends Key> = Omit<O, K> &\n  {\n    // Merge all but K\n    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities\n  }[K]\n\ntype EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>\n\ntype EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>\n\ntype _Either<\n  O extends object,\n  K extends Key,\n  strict extends Boolean\n> = {\n  1: EitherStrict<O, K>\n  0: EitherLoose<O, K>\n}[strict]\n\nexport type Either<\n  O extends object,\n  K extends Key,\n  strict extends Boolean = 1\n> = O extends unknown ? _Either<O, K, strict> : never\n\nexport type Union = any\n\nexport type PatchUndefined<O extends object, O1 extends object> = {\n  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]\n} & {}\n\n/** Helper Types for \"Merge\" **/\nexport type IntersectOf<U extends Union> = (\n  U extends unknown ? (k: U) => void : never\n) extends (k: infer I) => void\n  ? I\n  : never\n\nexport type Overwrite<O extends object, O1 extends object> = {\n    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];\n} & {};\n\ntype _Merge<U extends object> = IntersectOf<Overwrite<U, {\n    [K in keyof U]-?: At<U, K>;\n}>>;\n\ntype Key = string | number | symbol;\ntype AtStrict<O extends object, K extends Key> = O[K & keyof O];\ntype AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;\nexport type At<O extends object, K extends Key, strict extends Boolean = 1> = {\n    1: AtStrict<O, K>;\n    0: AtLoose<O, K>;\n}[strict];\n\nexport type ComputeRaw<A extends any> = A extends Function ? A : {\n  [K in keyof A]: A[K];\n} & {};\n\nexport type OptionalFlat<O> = {\n  [K in keyof O]?: O[K];\n} & {};\n\ntype _Record<K extends keyof any, T> = {\n  [P in K]: T;\n};\n\n// cause typescript not to expand types and preserve names\ntype NoExpand<T> = T extends unknown ? T : never;\n\n// this type assumes the passed object is entirely optional\nexport type AtLeast<O extends object, K extends string> = NoExpand<\n  O extends unknown\n  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)\n    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O\n  : never>;\n\ntype _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;\n\nexport type Strict<U extends object> = ComputeRaw<_Strict<U>>;\n/** End Helper Types for \"Merge\" **/\n\nexport type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;\n\nexport type Boolean = True | False\n\nexport type True = 1\n\nexport type False = 0\n\nexport type Not<B extends Boolean> = {\n  0: 1\n  1: 0\n}[B]\n\nexport type Extends<A1 extends any, A2 extends any> = [A1] extends [never]\n  ? 0 // anything `never` is false\n  : A1 extends A2\n  ? 1\n  : 0\n\nexport type Has<U extends Union, U1 extends Union> = Not<\n  Extends<Exclude<U1, U>, U1>\n>\n\nexport type Or<B1 extends Boolean, B2 extends Boolean> = {\n  0: {\n    0: 0\n    1: 1\n  }\n  1: {\n    0: 1\n    1: 1\n  }\n}[B1][B2]\n\nexport type Keys<U extends Union> = U extends unknown ? keyof U : never\n\nexport type GetScalarType<T, O> = O extends object ? {\n  [P in keyof T]: P extends keyof O\n    ? O[P]\n    : never\n} : never\n\ntype FieldPaths<\n  T,\n  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>\n> = IsObject<T> extends True ? U : T\n\nexport type GetHavingFields<T> = {\n  [K in keyof T]: Or<\n    Or<Extends<'OR', K>, Extends<'AND', K>>,\n    Extends<'NOT', K>\n  > extends True\n    ? // infer is only needed to not hit TS limit\n      // based on the brilliant idea of Pierre-Antoine Mills\n      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437\n      T[K] extends infer TK\n      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>\n      : never\n    : {} extends FieldPaths<T[K]>\n    ? never\n    : K\n}[keyof T]\n\n/**\n * Convert tuple to union\n */\ntype _TupleToUnion<T> = T extends (infer E)[] ? E : never\ntype TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>\nexport type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T\n\n/**\n * Like `Pick`, but additionally can also accept an array of keys\n */\nexport type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>\n\n/**\n * Exclude all keys with underscores\n */\nexport type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T\n\n\nexport type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>\n\ntype FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>\n\n\nexport const ModelName = {\n  User: 'User',\n  Category: 'Category',\n  Product: 'Product',\n  Table: 'Table',\n  Order: 'Order',\n  OrderProduct: 'OrderProduct'\n} as const\n\nexport type ModelName = (typeof ModelName)[keyof typeof ModelName]\n\n\n\nexport interface TypeMapCb<GlobalOmitOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {\n  returns: TypeMap<this['params']['extArgs'], GlobalOmitOptions>\n}\n\nexport type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {\n  globalOmitOptions: {\n    omit: GlobalOmitOptions\n  }\n  meta: {\n    modelProps: \"user\" | \"category\" | \"product\" | \"table\" | \"order\" | \"orderProduct\"\n    txIsolationLevel: never\n  }\n  model: {\n    User: {\n      payload: Prisma.$UserPayload<ExtArgs>\n      fields: Prisma.UserFieldRefs\n      operations: {\n        findUnique: {\n          args: Prisma.UserFindUniqueArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null\n        }\n        findUniqueOrThrow: {\n          args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>\n        }\n        findFirst: {\n          args: Prisma.UserFindFirstArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null\n        }\n        findFirstOrThrow: {\n          args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>\n        }\n        findMany: {\n          args: Prisma.UserFindManyArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]\n        }\n        create: {\n          args: Prisma.UserCreateArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>\n        }\n        createMany: {\n          args: Prisma.UserCreateManyArgs<ExtArgs>\n          result: BatchPayload\n        }\n        delete: {\n          args: Prisma.UserDeleteArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>\n        }\n        update: {\n          args: Prisma.UserUpdateArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>\n        }\n        deleteMany: {\n          args: Prisma.UserDeleteManyArgs<ExtArgs>\n          result: BatchPayload\n        }\n        updateMany: {\n          args: Prisma.UserUpdateManyArgs<ExtArgs>\n          result: BatchPayload\n        }\n        upsert: {\n          args: Prisma.UserUpsertArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>\n        }\n        aggregate: {\n          args: Prisma.UserAggregateArgs<ExtArgs>\n          result: runtime.Types.Utils.Optional<Prisma.AggregateUser>\n        }\n        groupBy: {\n          args: Prisma.UserGroupByArgs<ExtArgs>\n          result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[]\n        }\n        findRaw: {\n          args: Prisma.UserFindRawArgs<ExtArgs>\n          result: Prisma.JsonObject\n        }\n        aggregateRaw: {\n          args: Prisma.UserAggregateRawArgs<ExtArgs>\n          result: Prisma.JsonObject\n        }\n        count: {\n          args: Prisma.UserCountArgs<ExtArgs>\n          result: runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType> | number\n        }\n      }\n    }\n    Category: {\n      payload: Prisma.$CategoryPayload<ExtArgs>\n      fields: Prisma.CategoryFieldRefs\n      operations: {\n        findUnique: {\n          args: Prisma.CategoryFindUniqueArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload> | null\n        }\n        findUniqueOrThrow: {\n          args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>\n        }\n        findFirst: {\n          args: Prisma.CategoryFindFirstArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload> | null\n        }\n        findFirstOrThrow: {\n          args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>\n        }\n        findMany: {\n          args: Prisma.CategoryFindManyArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>[]\n        }\n        create: {\n          args: Prisma.CategoryCreateArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>\n        }\n        createMany: {\n          args: Prisma.CategoryCreateManyArgs<ExtArgs>\n          result: BatchPayload\n        }\n        delete: {\n          args: Prisma.CategoryDeleteArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>\n        }\n        update: {\n          args: Prisma.CategoryUpdateArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>\n        }\n        deleteMany: {\n          args: Prisma.CategoryDeleteManyArgs<ExtArgs>\n          result: BatchPayload\n        }\n        updateMany: {\n          args: Prisma.CategoryUpdateManyArgs<ExtArgs>\n          result: BatchPayload\n        }\n        upsert: {\n          args: Prisma.CategoryUpsertArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>\n        }\n        aggregate: {\n          args: Prisma.CategoryAggregateArgs<ExtArgs>\n          result: runtime.Types.Utils.Optional<Prisma.AggregateCategory>\n        }\n        groupBy: {\n          args: Prisma.CategoryGroupByArgs<ExtArgs>\n          result: runtime.Types.Utils.Optional<Prisma.CategoryGroupByOutputType>[]\n        }\n        findRaw: {\n          args: Prisma.CategoryFindRawArgs<ExtArgs>\n          result: Prisma.JsonObject\n        }\n        aggregateRaw: {\n          args: Prisma.CategoryAggregateRawArgs<ExtArgs>\n          result: Prisma.JsonObject\n        }\n        count: {\n          args: Prisma.CategoryCountArgs<ExtArgs>\n          result: runtime.Types.Utils.Optional<Prisma.CategoryCountAggregateOutputType> | number\n        }\n      }\n    }\n    Product: {\n      payload: Prisma.$ProductPayload<ExtArgs>\n      fields: Prisma.ProductFieldRefs\n      operations: {\n        findUnique: {\n          args: Prisma.ProductFindUniqueArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload> | null\n        }\n        findUniqueOrThrow: {\n          args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload>\n        }\n        findFirst: {\n          args: Prisma.ProductFindFirstArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload> | null\n        }\n        findFirstOrThrow: {\n          args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload>\n        }\n        findMany: {\n          args: Prisma.ProductFindManyArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload>[]\n        }\n        create: {\n          args: Prisma.ProductCreateArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload>\n        }\n        createMany: {\n          args: Prisma.ProductCreateManyArgs<ExtArgs>\n          result: BatchPayload\n        }\n        delete: {\n          args: Prisma.ProductDeleteArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload>\n        }\n        update: {\n          args: Prisma.ProductUpdateArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload>\n        }\n        deleteMany: {\n          args: Prisma.ProductDeleteManyArgs<ExtArgs>\n          result: BatchPayload\n        }\n        updateMany: {\n          args: Prisma.ProductUpdateManyArgs<ExtArgs>\n          result: BatchPayload\n        }\n        upsert: {\n          args: Prisma.ProductUpsertArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload>\n        }\n        aggregate: {\n          args: Prisma.ProductAggregateArgs<ExtArgs>\n          result: runtime.Types.Utils.Optional<Prisma.AggregateProduct>\n        }\n        groupBy: {\n          args: Prisma.ProductGroupByArgs<ExtArgs>\n          result: runtime.Types.Utils.Optional<Prisma.ProductGroupByOutputType>[]\n        }\n        findRaw: {\n          args: Prisma.ProductFindRawArgs<ExtArgs>\n          result: Prisma.JsonObject\n        }\n        aggregateRaw: {\n          args: Prisma.ProductAggregateRawArgs<ExtArgs>\n          result: Prisma.JsonObject\n        }\n        count: {\n          args: Prisma.ProductCountArgs<ExtArgs>\n          result: runtime.Types.Utils.Optional<Prisma.ProductCountAggregateOutputType> | number\n        }\n      }\n    }\n    Table: {\n      payload: Prisma.$TablePayload<ExtArgs>\n      fields: Prisma.TableFieldRefs\n      operations: {\n        findUnique: {\n          args: Prisma.TableFindUniqueArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$TablePayload> | null\n        }\n        findUniqueOrThrow: {\n          args: Prisma.TableFindUniqueOrThrowArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$TablePayload>\n        }\n        findFirst: {\n          args: Prisma.TableFindFirstArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$TablePayload> | null\n        }\n        findFirstOrThrow: {\n          args: Prisma.TableFindFirstOrThrowArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$TablePayload>\n        }\n        findMany: {\n          args: Prisma.TableFindManyArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$TablePayload>[]\n        }\n        create: {\n          args: Prisma.TableCreateArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$TablePayload>\n        }\n        createMany: {\n          args: Prisma.TableCreateManyArgs<ExtArgs>\n          result: BatchPayload\n        }\n        delete: {\n          args: Prisma.TableDeleteArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$TablePayload>\n        }\n        update: {\n          args: Prisma.TableUpdateArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$TablePayload>\n        }\n        deleteMany: {\n          args: Prisma.TableDeleteManyArgs<ExtArgs>\n          result: BatchPayload\n        }\n        updateMany: {\n          args: Prisma.TableUpdateManyArgs<ExtArgs>\n          result: BatchPayload\n        }\n        upsert: {\n          args: Prisma.TableUpsertArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$TablePayload>\n        }\n        aggregate: {\n          args: Prisma.TableAggregateArgs<ExtArgs>\n          result: runtime.Types.Utils.Optional<Prisma.AggregateTable>\n        }\n        groupBy: {\n          args: Prisma.TableGroupByArgs<ExtArgs>\n          result: runtime.Types.Utils.Optional<Prisma.TableGroupByOutputType>[]\n        }\n        findRaw: {\n          args: Prisma.TableFindRawArgs<ExtArgs>\n          result: Prisma.JsonObject\n        }\n        aggregateRaw: {\n          args: Prisma.TableAggregateRawArgs<ExtArgs>\n          result: Prisma.JsonObject\n        }\n        count: {\n          args: Prisma.TableCountArgs<ExtArgs>\n          result: runtime.Types.Utils.Optional<Prisma.TableCountAggregateOutputType> | number\n        }\n      }\n    }\n    Order: {\n      payload: Prisma.$OrderPayload<ExtArgs>\n      fields: Prisma.OrderFieldRefs\n      operations: {\n        findUnique: {\n          args: Prisma.OrderFindUniqueArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload> | null\n        }\n        findUniqueOrThrow: {\n          args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload>\n        }\n        findFirst: {\n          args: Prisma.OrderFindFirstArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload> | null\n        }\n        findFirstOrThrow: {\n          args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload>\n        }\n        findMany: {\n          args: Prisma.OrderFindManyArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload>[]\n        }\n        create: {\n          args: Prisma.OrderCreateArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload>\n        }\n        createMany: {\n          args: Prisma.OrderCreateManyArgs<ExtArgs>\n          result: BatchPayload\n        }\n        delete: {\n          args: Prisma.OrderDeleteArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload>\n        }\n        update: {\n          args: Prisma.OrderUpdateArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload>\n        }\n        deleteMany: {\n          args: Prisma.OrderDeleteManyArgs<ExtArgs>\n          result: BatchPayload\n        }\n        updateMany: {\n          args: Prisma.OrderUpdateManyArgs<ExtArgs>\n          result: BatchPayload\n        }\n        upsert: {\n          args: Prisma.OrderUpsertArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload>\n        }\n        aggregate: {\n          args: Prisma.OrderAggregateArgs<ExtArgs>\n          result: runtime.Types.Utils.Optional<Prisma.AggregateOrder>\n        }\n        groupBy: {\n          args: Prisma.OrderGroupByArgs<ExtArgs>\n          result: runtime.Types.Utils.Optional<Prisma.OrderGroupByOutputType>[]\n        }\n        findRaw: {\n          args: Prisma.OrderFindRawArgs<ExtArgs>\n          result: Prisma.JsonObject\n        }\n        aggregateRaw: {\n          args: Prisma.OrderAggregateRawArgs<ExtArgs>\n          result: Prisma.JsonObject\n        }\n        count: {\n          args: Prisma.OrderCountArgs<ExtArgs>\n          result: runtime.Types.Utils.Optional<Prisma.OrderCountAggregateOutputType> | number\n        }\n      }\n    }\n    OrderProduct: {\n      payload: Prisma.$OrderProductPayload<ExtArgs>\n      fields: Prisma.OrderProductFieldRefs\n      operations: {\n        findUnique: {\n          args: Prisma.OrderProductFindUniqueArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderProductPayload> | null\n        }\n        findUniqueOrThrow: {\n          args: Prisma.OrderProductFindUniqueOrThrowArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderProductPayload>\n        }\n        findFirst: {\n          args: Prisma.OrderProductFindFirstArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderProductPayload> | null\n        }\n        findFirstOrThrow: {\n          args: Prisma.OrderProductFindFirstOrThrowArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderProductPayload>\n        }\n        findMany: {\n          args: Prisma.OrderProductFindManyArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderProductPayload>[]\n        }\n        create: {\n          args: Prisma.OrderProductCreateArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderProductPayload>\n        }\n        createMany: {\n          args: Prisma.OrderProductCreateManyArgs<ExtArgs>\n          result: BatchPayload\n        }\n        delete: {\n          args: Prisma.OrderProductDeleteArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderProductPayload>\n        }\n        update: {\n          args: Prisma.OrderProductUpdateArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderProductPayload>\n        }\n        deleteMany: {\n          args: Prisma.OrderProductDeleteManyArgs<ExtArgs>\n          result: BatchPayload\n        }\n        updateMany: {\n          args: Prisma.OrderProductUpdateManyArgs<ExtArgs>\n          result: BatchPayload\n        }\n        upsert: {\n          args: Prisma.OrderProductUpsertArgs<ExtArgs>\n          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderProductPayload>\n        }\n        aggregate: {\n          args: Prisma.OrderProductAggregateArgs<ExtArgs>\n          result: runtime.Types.Utils.Optional<Prisma.AggregateOrderProduct>\n        }\n        groupBy: {\n          args: Prisma.OrderProductGroupByArgs<ExtArgs>\n          result: runtime.Types.Utils.Optional<Prisma.OrderProductGroupByOutputType>[]\n        }\n        findRaw: {\n          args: Prisma.OrderProductFindRawArgs<ExtArgs>\n          result: Prisma.JsonObject\n        }\n        aggregateRaw: {\n          args: Prisma.OrderProductAggregateRawArgs<ExtArgs>\n          result: Prisma.JsonObject\n        }\n        count: {\n          args: Prisma.OrderProductCountArgs<ExtArgs>\n          result: runtime.Types.Utils.Optional<Prisma.OrderProductCountAggregateOutputType> | number\n        }\n      }\n    }\n  }\n} & {\n  other: {\n    payload: any\n    operations: {\n      $runCommandRaw: {\n        args: Prisma.InputJsonObject,\n        result: JsonObject\n      }\n    }\n  }\n}\n\n/**\n * Enums\n */\n\nexport const UserScalarFieldEnum = {\n  id: 'id',\n  email: 'email',\n  name: 'name',\n  image: 'image',\n  password: 'password',\n  role: 'role'\n} as const\n\nexport type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]\n\n\nexport const CategoryScalarFieldEnum = {\n  id: 'id',\n  name: 'name',\n  createdAt: 'createdAt',\n  updatedAt: 'updatedAt'\n} as const\n\nexport type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]\n\n\nexport const ProductScalarFieldEnum = {\n  id: 'id',\n  name: 'name',\n  description: 'description',\n  image: 'image',\n  price: 'price',\n  stock: 'stock',\n  categoryId: 'categoryId'\n} as const\n\nexport type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]\n\n\nexport const TableScalarFieldEnum = {\n  id: 'id',\n  number: 'number',\n  status: 'status',\n  token: 'token',\n  qrCode: 'qrCode',\n  createdAt: 'createdAt',\n  updatedAt: 'updatedAt'\n} as const\n\nexport type TableScalarFieldEnum = (typeof TableScalarFieldEnum)[keyof typeof TableScalarFieldEnum]\n\n\nexport const OrderScalarFieldEnum = {\n  id: 'id',\n  userId: 'userId',\n  tableId: 'tableId',\n  tableNumber: 'tableNumber',\n  total: 'total',\n  status: 'status',\n  createdAt: 'createdAt',\n  updatedAt: 'updatedAt'\n} as const\n\nexport type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]\n\n\nexport const OrderProductScalarFieldEnum = {\n  id: 'id',\n  orderId: 'orderId',\n  productId: 'productId',\n  quantity: 'quantity'\n} as const\n\nexport type OrderProductScalarFieldEnum = (typeof OrderProductScalarFieldEnum)[keyof typeof OrderProductScalarFieldEnum]\n\n\nexport const SortOrder = {\n  asc: 'asc',\n  desc: 'desc'\n} as const\n\nexport type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]\n\n\nexport const QueryMode = {\n  default: 'default',\n  insensitive: 'insensitive'\n} as const\n\nexport type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]\n\n\n\n/**\n * Field references\n */\n\n\n/**\n * Reference to a field of type 'String'\n */\nexport type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>\n    \n\n\n/**\n * Reference to a field of type 'String[]'\n */\nexport type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>\n    \n\n\n/**\n * Reference to a field of type 'UserRole'\n */\nexport type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>\n    \n\n\n/**\n * Reference to a field of type 'UserRole[]'\n */\nexport type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>\n    \n\n\n/**\n * Reference to a field of type 'DateTime'\n */\nexport type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>\n    \n\n\n/**\n * Reference to a field of type 'DateTime[]'\n */\nexport type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>\n    \n\n\n/**\n * Reference to a field of type 'Float'\n */\nexport type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>\n    \n\n\n/**\n * Reference to a field of type 'Float[]'\n */\nexport type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>\n    \n\n\n/**\n * Reference to a field of type 'Int'\n */\nexport type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>\n    \n\n\n/**\n * Reference to a field of type 'Int[]'\n */\nexport type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>\n    \n\n\n/**\n * Reference to a field of type 'TableStatus'\n */\nexport type EnumTableStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TableStatus'>\n    \n\n\n/**\n * Reference to a field of type 'TableStatus[]'\n */\nexport type ListEnumTableStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TableStatus[]'>\n    \n\n\n/**\n * Reference to a field of type 'OrderStatus'\n */\nexport type EnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus'>\n    \n\n\n/**\n * Reference to a field of type 'OrderStatus[]'\n */\nexport type ListEnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus[]'>\n    \n\n/**\n * Batch Payload for updateMany & deleteMany & createMany\n */\nexport type BatchPayload = {\n  count: number\n}\n\n\nexport type Datasource = {\n  url?: string\n}\nexport type Datasources = {\n  db?: Datasource\n}\n\nexport const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<\"define\", TypeMapCb, runtime.Types.Extensions.DefaultArgs>\nexport type DefaultPrismaClient = PrismaClient\nexport type ErrorFormat = 'pretty' | 'colorless' | 'minimal'\nexport interface PrismaClientOptions {\n  /**\n   * Overwrites the datasource url from your schema.prisma file\n   */\n  datasources?: Datasources\n  /**\n   * Overwrites the datasource url from your schema.prisma file\n   */\n  datasourceUrl?: string\n  /**\n   * @default \"colorless\"\n   */\n  errorFormat?: ErrorFormat\n  /**\n   * @example\n   * ```\n   * // Shorthand for `emit: 'stdout'`\n   * log: ['query', 'info', 'warn', 'error']\n   * \n   * // Emit as events only\n   * log: [\n   *   { emit: 'event', level: 'query' },\n   *   { emit: 'event', level: 'info' },\n   *   { emit: 'event', level: 'warn' }\n   *   { emit: 'event', level: 'error' }\n   * ]\n   * \n   * / Emit as events and log to stdout\n   * og: [\n   *  { emit: 'stdout', level: 'query' },\n   *  { emit: 'stdout', level: 'info' },\n   *  { emit: 'stdout', level: 'warn' }\n   *  { emit: 'stdout', level: 'error' }\n   * \n   * ```\n   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).\n   */\n  log?: (LogLevel | LogDefinition)[]\n  /**\n   * The default values for transactionOptions\n   * maxWait ?= 2000\n   * timeout ?= 5000\n   */\n  transactionOptions?: {\n    maxWait?: number\n    timeout?: number\n  }\n  /**\n   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`\n   */\n  adapter?: runtime.SqlDriverAdapterFactory | null\n  /**\n   * Global configuration for omitting model fields by default.\n   * \n   * @example\n   * ```\n   * const prisma = new PrismaClient({\n   *   omit: {\n   *     user: {\n   *       password: true\n   *     }\n   *   }\n   * })\n   * ```\n   */\n  omit?: GlobalOmitConfig\n}\nexport type GlobalOmitConfig = {\n  user?: Prisma.UserOmit\n  category?: Prisma.CategoryOmit\n  product?: Prisma.ProductOmit\n  table?: Prisma.TableOmit\n  order?: Prisma.OrderOmit\n  orderProduct?: Prisma.OrderProductOmit\n}\n\n/* Types for Logging */\nexport type LogLevel = 'info' | 'query' | 'warn' | 'error'\nexport type LogDefinition = {\n  level: LogLevel\n  emit: 'stdout' | 'event'\n}\n\nexport type CheckIsLogLevel<T> = T extends LogLevel ? T : never;\n\nexport type GetLogType<T> = CheckIsLogLevel<\n  T extends LogDefinition ? T['level'] : T\n>;\n\nexport type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>\n  ? GetLogType<T[number]>\n  : never;\n\nexport type QueryEvent = {\n  timestamp: Date\n  query: string\n  params: string\n  duration: number\n  target: string\n}\n\nexport type LogEvent = {\n  timestamp: Date\n  message: string\n  target: string\n}\n/* End Types for Logging */\n\n\nexport type PrismaAction =\n  | 'findUnique'\n  | 'findUniqueOrThrow'\n  | 'findMany'\n  | 'findFirst'\n  | 'findFirstOrThrow'\n  | 'create'\n  | 'createMany'\n  | 'createManyAndReturn'\n  | 'update'\n  | 'updateMany'\n  | 'updateManyAndReturn'\n  | 'upsert'\n  | 'delete'\n  | 'deleteMany'\n  | 'executeRaw'\n  | 'queryRaw'\n  | 'aggregate'\n  | 'count'\n  | 'runCommandRaw'\n  | 'findRaw'\n  | 'groupBy'\n\n/**\n * `PrismaClient` proxy available in interactive transactions.\n */\nexport type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>\n\n","\n/* !!! This is code generated by Prisma. Do not edit directly. !!! */\n/* eslint-disable */\n// @ts-nocheck \n/*\n* This file exports all enum related types from the schema.\n*\n* ðŸŸ¢ You can import this file directly.\n*/\n\nexport const UserRole = {\n  CUSTOMER: 'CUSTOMER',\n  ADMIN: 'ADMIN'\n} as const\n\nexport type UserRole = (typeof UserRole)[keyof typeof UserRole]\n\n\nexport const OrderStatus = {\n  PENDING: 'PENDING',\n  PROCESSING: 'PROCESSING',\n  COMPLETED: 'COMPLETED',\n  CANCELLED: 'CANCELLED'\n} as const\n\nexport type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus]\n\n\nexport const TableStatus = {\n  AVAILABLE: 'AVAILABLE',\n  OCCUPIED: 'OCCUPIED',\n  RESERVED: 'RESERVED'\n} as const\n\nexport type TableStatus = (typeof TableStatus)[keyof typeof TableStatus]\n","\n/* !!! This is code generated by Prisma. Do not edit directly. !!! */\n/* eslint-disable */\n// @ts-nocheck \n/*\n * This file should be your main import to use Prisma. Through it you get access to all the models, enums, and input types.\n * If you're looking for something you can import in the client-side of your application, please refer to the `browser.ts` file instead.\n * \n * ðŸŸ¢ You can import this file directly.\n */\n\nimport * as process from 'node:process'\nimport * as path from 'node:path'\nimport { fileURLToPath } from 'node:url'\nglobalThis['__dirname'] = path.dirname(fileURLToPath(import.meta.url))\n\nimport * as runtime from \"@prisma/client/runtime/library\"\nimport * as $Enums from \"./enums\"\nimport * as $Class from \"./internal/class\"\nimport * as Prisma from \"./internal/prismaNamespace\"\n\nexport * as $Enums from './enums'\nexport * from \"./enums\"\n/**\n * ## Prisma Client\n * \n * Type-safe database client for TypeScript\n * @example\n * ```\n * const prisma = new PrismaClient()\n * // Fetch zero or more Users\n * const users = await prisma.user.findMany()\n * ```\n * \n * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).\n */\nexport const PrismaClient = $Class.getPrismaClientClass(__dirname)\nexport type PrismaClient<LogOpts extends Prisma.LogLevel = never, OmitOpts extends Prisma.PrismaClientOptions[\"omit\"] = Prisma.PrismaClientOptions[\"omit\"], ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = $Class.PrismaClient<LogOpts, OmitOpts, ExtArgs>\nexport { Prisma }\n\n\n// file annotations for bundling tools to include these files\npath.join(__dirname, \"query_engine-windows.dll.node\")\npath.join(process.cwd(), \"src/generated/prisma/query_engine-windows.dll.node\")\n\n/**\n * Model User\n * \n */\nexport type User = Prisma.UserModel\n/**\n * Model Category\n * \n */\nexport type Category = Prisma.CategoryModel\n/**\n * Model Product\n * \n */\nexport type Product = Prisma.ProductModel\n/**\n * Model Table\n * \n */\nexport type Table = Prisma.TableModel\n/**\n * Model Order\n * \n */\nexport type Order = Prisma.OrderModel\n/**\n * Model OrderProduct\n * \n */\nexport type OrderProduct = Prisma.OrderProductModel\n","import { PrismaClient } from '@/generated/prisma/client';\r\n\r\nexport const prisma = new PrismaClient({\r\n    log: ['query', 'error', 'warn', 'info'],\r\n});\r\n","import { PrismaClient, Prisma } from '@/generated/prisma/client';\r\nimport { prisma } from '@/lib/prisma';\r\n\r\nexport interface PrismaModelDelegate<T, CreateInput, UpdateInput> {\r\n  findUnique: (args: { where: { id: string } }) => Promise<T | null>;\r\n  findMany: (args?: { where?: object }) => Promise<T[]>;\r\n  create: (args: { data: CreateInput }) => Promise<T>;\r\n  update: (args: { where: { id: string }; data: UpdateInput }) => Promise<T>;\r\n  delete: (args: { where: { id: string } }) => Promise<T>;\r\n}\r\n\r\nexport abstract class BaseRepository<T, CreateInput, UpdateInput> {\r\n  protected readonly prisma: PrismaClient;\r\n\r\n  constructor() {\r\n    this.prisma = prisma;\r\n  }\r\n\r\n  protected abstract getDelegate(): PrismaModelDelegate<T, CreateInput, UpdateInput>;\r\n\r\n  async findById(id: string): Promise<T | null> {\r\n    return await this.getDelegate().findUnique({\r\n      where: { id },\r\n    });\r\n  }\r\n\r\n  async findAll(): Promise<T[]> {\r\n    return await this.getDelegate().findMany();\r\n  }\r\n\r\n  async create(data: CreateInput): Promise<T> {\r\n    return await this.getDelegate().create({\r\n      data,\r\n    });\r\n  }\r\n\r\n  async update(id: string, data: UpdateInput): Promise<T> {\r\n    return await this.getDelegate().update({\r\n      where: { id },\r\n      data,\r\n    });\r\n  }\r\n\r\n  async delete(id: string): Promise<T> {\r\n    return await this.getDelegate().delete({\r\n      where: { id },\r\n    });\r\n  }\r\n}\r\n","import { User } from '@/generated/prisma/client';\r\nimport { BaseRepository, PrismaModelDelegate } from './base-repository';\r\nimport { UserCreate, UserUpdate } from '../schemas/user-schema';\r\n\r\nexport class UserRepository extends BaseRepository<User, UserCreate, UserUpdate> {\r\n  protected getDelegate(): PrismaModelDelegate<User, UserCreate, UserUpdate> {\r\n    return {\r\n      findUnique: (args) => this.prisma.user.findUnique(args),\r\n      findMany: (args) => this.prisma.user.findMany(args),\r\n      create: (args) => this.prisma.user.create(args),\r\n      update: (args) => this.prisma.user.update(args),\r\n      delete: (args) => this.prisma.user.delete(args),\r\n    };\r\n  }\r\n\r\n  async findByEmail(email: string): Promise<User | null> {\r\n    return await this.prisma.user.findUnique({\r\n      where: { email },\r\n    });\r\n  }\r\n}\r\n","export class BaseError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    public message: string,\r\n    public type: string = 'BaseError'\r\n  ) {\r\n    super(message);\r\n    this.name = this.constructor.name;\r\n    Error.captureStackTrace(this, this.constructor);\r\n  }\r\n}\r\n\r\nexport class NotFoundError extends BaseError {\r\n  constructor(message: string = 'Resource not found') {\r\n    super(404, message, 'NotFoundError');\r\n  }\r\n}\r\n\r\nexport class BadRequestError extends BaseError {\r\n  constructor(message: string = 'Bad request') {\r\n    super(400, message, 'BadRequestError');\r\n  }\r\n}\r\n\r\nexport class UnauthorizedError extends BaseError {\r\n  constructor(message: string = 'Unauthorized') {\r\n    super(401, message, 'UnauthorizedError');\r\n  }\r\n}\r\n\r\nexport class ValidationError extends BaseError {\r\n  constructor(message: string = 'Validation failed') {\r\n    super(400, message, 'ValidationError');\r\n  }\r\n}","import { User } from '@/generated/prisma/client';\r\nimport { UserRepository } from '../repositories/user-repository';\r\nimport { UserCreate, UserUpdate } from '../schemas/user-schema';\r\nimport { NotFoundError, BadRequestError } from '../errors/base-error';\r\nimport * as bcrypt from 'bcrypt';\r\n\r\nexport class UserService {\r\n  private readonly repository: UserRepository;\r\n\r\n  constructor() {\r\n    this.repository = new UserRepository();\r\n  }\r\n\r\n  async findById(id: string): Promise<User> {\r\n    const user = await this.repository.findById(id);\r\n    if (!user) {\r\n      throw new NotFoundError('User not found');\r\n    }\r\n    return user;\r\n  }\r\n\r\n  async findByEmail(email: string): Promise<User | null> {\r\n    return await this.repository.findByEmail(email);\r\n  }\r\n\r\n  async create(data: UserCreate): Promise<User> {\r\n    const existingUser = await this.findByEmail(data.email);\r\n    if (existingUser) {\r\n      throw new BadRequestError('Email already in use');\r\n    }\r\n\r\n    const hashedPassword = await bcrypt.hash(data.password, 10);\r\n    return await this.repository.create({\r\n      ...data,\r\n      password: hashedPassword,\r\n    });\r\n  }\r\n\r\n  async update(id: string, data: UserUpdate): Promise<User> {\r\n    await this.findById(id); // Check if user exists\r\n\r\n    if (data.email) {\r\n      const existingUser = await this.findByEmail(data.email);\r\n      if (existingUser && existingUser.id !== id) {\r\n        throw new BadRequestError('Email already in use');\r\n      }\r\n    }\r\n\r\n    if (data.password) {\r\n      data.password = await bcrypt.hash(data.password, 10);\r\n    }\r\n\r\n    return await this.repository.update(id, data);\r\n  }\r\n\r\n  async delete(id: string): Promise<User> {\r\n    await this.findById(id); // Check if user exists\r\n    return await this.repository.delete(id);\r\n  }\r\n\r\n  async validatePassword(user: User, password: string): Promise<boolean> {\r\n    return await bcrypt.compare(password, user.password);\r\n  }\r\n}","import { UserService } from '@/server/services/user-service';\r\n\r\nexport async function ensureAdminExists() {\r\n  try {\r\n    const userService = new UserService();\r\n    \r\n    // Check if admin already exists\r\n    const existingAdmin = await userService.findByEmail('admin1@gmail.com');\r\n    if (existingAdmin) {\r\n      console.log('Admin account already exists');\r\n      return existingAdmin;\r\n    }\r\n\r\n    // Create admin account\r\n    const admin = await userService.create({\r\n      email: 'admin1@gmail.com',\r\n      password: '123456',\r\n      name: 'Admin',\r\n      role: 'ADMIN',\r\n    });\r\n\r\n    console.log('Admin account created successfully:', admin.email);\r\n    return admin;\r\n  } catch (error) {\r\n    console.error('Failed to create admin account:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n","import type { Metadata } from \"next\";\nimport { Geist, Geist_Mono } from \"next/font/google\";\nimport \"@/styles/globals.css\";\n\nimport { ThemeProvider } from \"@/components/theme/theme-provider\";\nimport { MainNav } from \"@/components/layout/main-nav\";\nimport { CartProvider } from \"@/contexts/cart-context\";\nimport { AuthProvider } from \"@/contexts/auth-context\";\nimport { ensureAdminExists } from \"@/lib/init-admin\";\n\nconst geistSans = Geist({\n  variable: \"--font-geist-sans\",\n  subsets: [\"latin\"],\n});\n\nconst geistMono = Geist_Mono({\n  variable: \"--font-geist-mono\",\n  subsets: [\"latin\"],\n});\n\nexport const metadata: Metadata = {\n  title: \"HRK Dashboard\",\n  description: \"HRK E-commerce Dashboard\",\n};\n\nexport default async function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  // Ensure admin account exists on server startup\n  try {\n    await ensureAdminExists();\n  } catch (error) {\n    console.error('Failed to initialize admin:', error);\n  }\n\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body className={`${geistSans.variable} ${geistMono.variable} min-h-screen bg-background font-sans antialiased`}>\n        <ThemeProvider\n          attribute=\"class\"\n          defaultTheme=\"system\"\n          enableSystem\n          disableTransitionOnChange\n        >\n          <AuthProvider>\n            <CartProvider>\n              <div className=\"relative flex min-h-screen flex-col\">\n            <MainNav />\n                <main className=\"flex-1 container py-6 max-w-7xl mx-auto w-full\">\n              {children}\n            </main>\n          </div>\n            </CartProvider>\n          </AuthProvider>\n        </ThemeProvider>\n      </body>\n    </html>\n  );\n}\n"],"names":[],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7]}