{"version":3,"sources":["turbopack:///[project]/node_modules/next/dist/src/build/templates/app-page.ts"],"sourcesContent":["import type { LoaderTree } from '../../server/lib/app-dir-module'\nimport type { IncomingMessage, ServerResponse } from 'node:http'\n\nimport {\n  AppPageRouteModule,\n  type AppPageRouteHandlerContext,\n} from '../../server/route-modules/app-page/module.compiled' with { 'turbopack-transition': 'next-ssr' }\n\nimport { RouteKind } from '../../server/route-kind' with { 'turbopack-transition': 'next-server-utility' }\n\nimport { getRevalidateReason } from '../../server/instrumentation/utils'\nimport { getTracer, SpanKind, type Span } from '../../server/lib/trace/tracer'\nimport { getRequestMeta } from '../../server/request-meta'\nimport { BaseServerSpan } from '../../server/lib/trace/constants'\nimport { interopDefault } from '../../server/app-render/interop-default'\nimport { stripFlightHeaders } from '../../server/app-render/strip-flight-headers'\nimport { NodeNextRequest, NodeNextResponse } from '../../server/base-http/node'\nimport { checkIsAppPPREnabled } from '../../server/lib/experimental/ppr'\nimport {\n  getFallbackRouteParams,\n  type FallbackRouteParams,\n} from '../../server/request/fallback-params'\nimport { setReferenceManifestsSingleton } from '../../server/app-render/encryption-utils'\nimport {\n  isHtmlBotRequest,\n  shouldServeStreamingMetadata,\n} from '../../server/lib/streaming-metadata'\nimport { createServerModuleMap } from '../../server/app-render/action-utils'\nimport { normalizeAppPath } from '../../shared/lib/router/utils/app-paths'\nimport { getIsPossibleServerAction } from '../../server/lib/server-action-request-meta'\nimport {\n  RSC_HEADER,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_IS_PRERENDER_HEADER,\n  NEXT_DID_POSTPONE_HEADER,\n  RSC_CONTENT_TYPE_HEADER,\n} from '../../client/components/app-router-headers'\nimport { getBotType, isBot } from '../../shared/lib/router/utils/is-bot'\nimport {\n  CachedRouteKind,\n  type CachedAppPageValue,\n  type CachedPageValue,\n  type ResponseCacheEntry,\n  type ResponseGenerator,\n} from '../../server/response-cache'\nimport { FallbackMode, parseFallbackField } from '../../lib/fallback'\nimport RenderResult from '../../server/render-result'\nimport {\n  CACHE_ONE_YEAR,\n  HTML_CONTENT_TYPE_HEADER,\n  NEXT_CACHE_TAGS_HEADER,\n} from '../../lib/constants'\nimport type { CacheControl } from '../../server/lib/cache-control'\nimport { ENCODED_TAGS } from '../../server/stream-utils/encoded-tags'\nimport { sendRenderResult } from '../../server/send-payload'\nimport { NoFallbackError } from '../../shared/lib/no-fallback-error.external'\n\n// These are injected by the loader afterwards.\n\n/**\n * The tree created in next-app-loader that holds component segments and modules\n * and I've updated it.\n */\ndeclare const tree: LoaderTree\ndeclare const pages: any\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\n// INJECT:tree\n// INJECT:pages\n\nexport { tree, pages }\n\nimport GlobalError from 'VAR_MODULE_GLOBAL_ERROR' with { 'turbopack-transition': 'next-server-utility' }\n\nexport { GlobalError }\n\n// These are injected by the loader afterwards.\ndeclare const __next_app_require__: (id: string | number) => unknown\ndeclare const __next_app_load_chunk__: (id: string | number) => Promise<unknown>\n\n// INJECT:__next_app_require__\n// INJECT:__next_app_load_chunk__\n\nexport const __next_app__ = {\n  require: __next_app_require__,\n  loadChunk: __next_app_load_chunk__,\n}\n\nimport * as entryBase from '../../server/app-render/entry-base' with { 'turbopack-transition': 'next-server-utility' }\nimport { RedirectStatusCode } from '../../client/components/redirect-status-code'\n\nexport * from '../../server/app-render/entry-base' with { 'turbopack-transition': 'next-server-utility' }\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new AppPageRouteModule({\n  definition: {\n    kind: RouteKind.APP_PAGE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n    appPaths: [],\n  },\n  userland: {\n    loaderTree: tree,\n  },\n  distDir: process.env.__NEXT_RELATIVE_DIST_DIR || '',\n  relativeProjectDir: process.env.__NEXT_RELATIVE_PROJECT_DIR || '',\n})\n\nexport async function handler(\n  req: IncomingMessage,\n  res: ServerResponse,\n  ctx: {\n    waitUntil: (prom: Promise<void>) => void\n  }\n) {\n  let srcPage = 'VAR_DEFINITION_PAGE'\n\n  // turbopack doesn't normalize `/index` in the page name\n  // so we need to to process dynamic routes properly\n  // TODO: fix turbopack providing differing value from webpack\n  if (process.env.TURBOPACK) {\n    srcPage = srcPage.replace(/\\/index$/, '') || '/'\n  } else if (srcPage === '/index') {\n    // we always normalize /index specifically\n    srcPage = '/'\n  }\n  const multiZoneDraftMode = process.env\n    .__NEXT_MULTI_ZONE_DRAFT_MODE as any as boolean\n\n  const initialPostponed = getRequestMeta(req, 'postponed')\n  // TODO: replace with more specific flags\n  const minimalMode = getRequestMeta(req, 'minimalMode')\n\n  const prepareResult = await routeModule.prepare(req, res, {\n    srcPage,\n    multiZoneDraftMode,\n  })\n\n  if (!prepareResult) {\n    res.statusCode = 400\n    res.end('Bad Request')\n    ctx.waitUntil?.(Promise.resolve())\n    return null\n  }\n\n  const {\n    buildId,\n    query,\n    params,\n    parsedUrl,\n    pageIsDynamic,\n    buildManifest,\n    nextFontManifest,\n    reactLoadableManifest,\n    serverActionsManifest,\n    clientReferenceManifest,\n    subresourceIntegrityManifest,\n    prerenderManifest,\n    isDraftMode,\n    resolvedPathname,\n    revalidateOnlyGenerated,\n    routerServerContext,\n    nextConfig,\n    interceptionRoutePatterns,\n  } = prepareResult\n\n  const pathname = parsedUrl.pathname || '/'\n  const normalizedSrcPage = normalizeAppPath(srcPage)\n\n  let { isOnDemandRevalidate } = prepareResult\n\n  const prerenderInfo = routeModule.match(pathname, prerenderManifest)\n  const isPrerendered = !!prerenderManifest.routes[resolvedPathname]\n\n  let isSSG = Boolean(\n    prerenderInfo ||\n      isPrerendered ||\n      prerenderManifest.routes[normalizedSrcPage]\n  )\n\n  const userAgent = req.headers['user-agent'] || ''\n  const botType = getBotType(userAgent)\n  const isHtmlBot = isHtmlBotRequest(req)\n\n  /**\n   * If true, this indicates that the request being made is for an app\n   * prefetch request.\n   */\n  const isPrefetchRSCRequest =\n    getRequestMeta(req, 'isPrefetchRSCRequest') ??\n    req.headers[NEXT_ROUTER_PREFETCH_HEADER] === '1' // exclude runtime prefetches, which use '2'\n\n  // NOTE: Don't delete headers[RSC] yet, it still needs to be used in renderToHTML later\n\n  const isRSCRequest =\n    getRequestMeta(req, 'isRSCRequest') ?? Boolean(req.headers[RSC_HEADER])\n\n  const isPossibleServerAction = getIsPossibleServerAction(req)\n\n  /**\n   * If the route being rendered is an app page, and the ppr feature has been\n   * enabled, then the given route _could_ support PPR.\n   */\n  const couldSupportPPR: boolean = checkIsAppPPREnabled(\n    nextConfig.experimental.ppr\n  )\n\n  // When enabled, this will allow the use of the `?__nextppronly` query to\n  // enable debugging of the static shell.\n  const hasDebugStaticShellQuery =\n    process.env.__NEXT_EXPERIMENTAL_STATIC_SHELL_DEBUGGING === '1' &&\n    typeof query.__nextppronly !== 'undefined' &&\n    couldSupportPPR\n\n  // When enabled, this will allow the use of the `?__nextppronly` query\n  // to enable debugging of the fallback shell.\n  const hasDebugFallbackShellQuery =\n    hasDebugStaticShellQuery && query.__nextppronly === 'fallback'\n\n  // This page supports PPR if it is marked as being `PARTIALLY_STATIC` in the\n  // prerender manifest and this is an app page.\n  const isRoutePPREnabled: boolean =\n    couldSupportPPR &&\n    ((\n      prerenderManifest.routes[normalizedSrcPage] ??\n      prerenderManifest.dynamicRoutes[normalizedSrcPage]\n    )?.renderingMode === 'PARTIALLY_STATIC' ||\n      // Ideally we'd want to check the appConfig to see if this page has PPR\n      // enabled or not, but that would require plumbing the appConfig through\n      // to the server during development. We assume that the page supports it\n      // but only during development.\n      (hasDebugStaticShellQuery &&\n        (routeModule.isDev === true ||\n          routerServerContext?.experimentalTestProxy === true)))\n\n  const isDebugStaticShell: boolean =\n    hasDebugStaticShellQuery && isRoutePPREnabled\n\n  // We should enable debugging dynamic accesses when the static shell\n  // debugging has been enabled and we're also in development mode.\n  const isDebugDynamicAccesses =\n    isDebugStaticShell && routeModule.isDev === true\n\n  const isDebugFallbackShell = hasDebugFallbackShellQuery && isRoutePPREnabled\n\n  // If we're in minimal mode, then try to get the postponed information from\n  // the request metadata. If available, use it for resuming the postponed\n  // render.\n  const minimalPostponed = isRoutePPREnabled ? initialPostponed : undefined\n\n  // If PPR is enabled, and this is a RSC request (but not a prefetch), then\n  // we can use this fact to only generate the flight data for the request\n  // because we can't cache the HTML (as it's also dynamic).\n  const isDynamicRSCRequest =\n    isRoutePPREnabled && isRSCRequest && !isPrefetchRSCRequest\n\n  // Need to read this before it's stripped by stripFlightHeaders. We don't\n  // need to transfer it to the request meta because it's only read\n  // within this function; the static segment data should have already been\n  // generated, so we will always either return a static response or a 404.\n  const segmentPrefetchHeader = getRequestMeta(req, 'segmentPrefetchRSCRequest')\n\n  // TODO: investigate existing bug with shouldServeStreamingMetadata always\n  // being true for a revalidate due to modifying the base-server this.renderOpts\n  // when fixing this to correct logic it causes hydration issue since we set\n  // serveStreamingMetadata to true during export\n  let serveStreamingMetadata = !userAgent\n    ? true\n    : shouldServeStreamingMetadata(userAgent, nextConfig.htmlLimitedBots)\n\n  if (isHtmlBot && isRoutePPREnabled) {\n    isSSG = false\n    serveStreamingMetadata = false\n  }\n\n  // In development, we always want to generate dynamic HTML.\n  let supportsDynamicResponse: boolean =\n    // If we're in development, we always support dynamic HTML, unless it's\n    // a data request, in which case we only produce static HTML.\n    routeModule.isDev === true ||\n    // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isSSG ||\n    // If this request has provided postponed data, it supports dynamic\n    // HTML.\n    typeof initialPostponed === 'string' ||\n    // If this is a dynamic RSC request, then this render supports dynamic\n    // HTML (it's dynamic).\n    isDynamicRSCRequest\n\n  // When html bots request PPR page, perform the full dynamic rendering.\n  const shouldWaitOnAllReady = isHtmlBot && isRoutePPREnabled\n\n  let ssgCacheKey: string | null = null\n  if (\n    !isDraftMode &&\n    isSSG &&\n    !supportsDynamicResponse &&\n    !isPossibleServerAction &&\n    !minimalPostponed &&\n    !isDynamicRSCRequest\n  ) {\n    ssgCacheKey = resolvedPathname\n  }\n\n  // the staticPathKey differs from ssgCacheKey since\n  // ssgCacheKey is null in dev since we're always in \"dynamic\"\n  // mode in dev to bypass the cache, but we still need to honor\n  // dynamicParams = false in dev mode\n  let staticPathKey = ssgCacheKey\n  if (!staticPathKey && routeModule.isDev) {\n    staticPathKey = resolvedPathname\n  }\n\n  // If this is a request for an app path that should be statically generated\n  // and we aren't in the edge runtime, strip the flight headers so it will\n  // generate the static response.\n  if (\n    !routeModule.isDev &&\n    !isDraftMode &&\n    isSSG &&\n    isRSCRequest &&\n    !isDynamicRSCRequest\n  ) {\n    stripFlightHeaders(req.headers)\n  }\n\n  const ComponentMod = {\n    ...entryBase,\n    tree,\n    pages,\n    GlobalError,\n    handler,\n    routeModule,\n    __next_app__,\n  }\n\n  // Before rendering (which initializes component tree modules), we have to\n  // set the reference manifests to our global store so Server Action's\n  // encryption util can access to them at the top level of the page module.\n  if (serverActionsManifest && clientReferenceManifest) {\n    setReferenceManifestsSingleton({\n      page: srcPage,\n      clientReferenceManifest,\n      serverActionsManifest,\n      serverModuleMap: createServerModuleMap({\n        serverActionsManifest,\n      }),\n    })\n  }\n\n  const method = req.method || 'GET'\n  const tracer = getTracer()\n  const activeSpan = tracer.getActiveScopeSpan()\n\n  try {\n    const varyHeader = routeModule.getVaryHeader(\n      resolvedPathname,\n      interceptionRoutePatterns\n    )\n    res.setHeader('Vary', varyHeader)\n    const invokeRouteModule = async (\n      span: Span | undefined,\n      context: AppPageRouteHandlerContext\n    ) => {\n      const nextReq = new NodeNextRequest(req)\n      const nextRes = new NodeNextResponse(res)\n\n      // TODO: adapt for putting the RDC inside the postponed data\n      // If we're in dev, and this isn't a prefetch or a server action,\n      // we should seed the resume data cache.\n      if (process.env.NODE_ENV === 'development') {\n        if (\n          nextConfig.experimental.cacheComponents &&\n          !isPrefetchRSCRequest &&\n          !context.renderOpts.isPossibleServerAction\n        ) {\n          const warmup = await routeModule.warmup(nextReq, nextRes, context)\n\n          // If the warmup is successful, we should use the resume data\n          // cache from the warmup.\n          if (warmup.metadata.renderResumeDataCache) {\n            context.renderOpts.renderResumeDataCache =\n              warmup.metadata.renderResumeDataCache\n          }\n        }\n      }\n\n      return routeModule.render(nextReq, nextRes, context).finally(() => {\n        if (!span) return\n\n        span.setAttributes({\n          'http.status_code': res.statusCode,\n          'next.rsc': false,\n        })\n\n        const rootSpanAttributes = tracer.getRootSpanAttributes()\n        // We were unable to get attributes, probably OTEL is not enabled\n        if (!rootSpanAttributes) {\n          return\n        }\n\n        if (\n          rootSpanAttributes.get('next.span_type') !==\n          BaseServerSpan.handleRequest\n        ) {\n          console.warn(\n            `Unexpected root span type '${rootSpanAttributes.get(\n              'next.span_type'\n            )}'. Please report this Next.js issue https://github.com/vercel/next.js`\n          )\n          return\n        }\n\n        const route = rootSpanAttributes.get('next.route')\n        if (route) {\n          const name = `${method} ${route}`\n\n          span.setAttributes({\n            'next.route': route,\n            'http.route': route,\n            'next.span_name': name,\n          })\n          span.updateName(name)\n        } else {\n          span.updateName(`${method} ${req.url}`)\n        }\n      })\n    }\n\n    const doRender = async ({\n      span,\n      postponed,\n      fallbackRouteParams,\n    }: {\n      span?: Span\n      /**\n       * The postponed data for this render. This is only provided when resuming\n       * a render that has been postponed.\n       */\n      postponed: string | undefined\n\n      /**\n       * The unknown route params for this render.\n       */\n      fallbackRouteParams: FallbackRouteParams | null\n    }): Promise<ResponseCacheEntry> => {\n      const context: AppPageRouteHandlerContext = {\n        query,\n        params,\n        page: normalizedSrcPage,\n        sharedContext: {\n          buildId,\n        },\n        serverComponentsHmrCache: getRequestMeta(\n          req,\n          'serverComponentsHmrCache'\n        ),\n        fallbackRouteParams,\n        renderOpts: {\n          App: () => null,\n          Document: () => null,\n          pageConfig: {},\n          ComponentMod,\n          Component: interopDefault(ComponentMod),\n\n          params,\n          routeModule,\n          page: srcPage,\n          postponed,\n          shouldWaitOnAllReady,\n          serveStreamingMetadata,\n          supportsDynamicResponse:\n            typeof postponed === 'string' || supportsDynamicResponse,\n          buildManifest,\n          nextFontManifest,\n          reactLoadableManifest,\n          subresourceIntegrityManifest,\n          serverActionsManifest,\n          clientReferenceManifest,\n          setIsrStatus: routerServerContext?.setIsrStatus,\n\n          dir:\n            process.env.NEXT_RUNTIME === 'nodejs'\n              ? (require('path') as typeof import('path')).join(\n                  /* turbopackIgnore: true */\n                  process.cwd(),\n                  routeModule.relativeProjectDir\n                )\n              : `${process.cwd()}/${routeModule.relativeProjectDir}`,\n          isDraftMode,\n          isRevalidate: isSSG && !postponed && !isDynamicRSCRequest,\n          botType,\n          isOnDemandRevalidate,\n          isPossibleServerAction,\n          assetPrefix: nextConfig.assetPrefix,\n          nextConfigOutput: nextConfig.output,\n          crossOrigin: nextConfig.crossOrigin,\n          trailingSlash: nextConfig.trailingSlash,\n          previewProps: prerenderManifest.preview,\n          deploymentId: nextConfig.deploymentId,\n          enableTainting: nextConfig.experimental.taint,\n          htmlLimitedBots: nextConfig.htmlLimitedBots,\n          devtoolSegmentExplorer:\n            nextConfig.experimental.devtoolSegmentExplorer,\n          reactMaxHeadersLength: nextConfig.reactMaxHeadersLength,\n\n          multiZoneDraftMode,\n          incrementalCache: getRequestMeta(req, 'incrementalCache'),\n          cacheLifeProfiles: nextConfig.experimental.cacheLife,\n          basePath: nextConfig.basePath,\n          serverActions: nextConfig.experimental.serverActions,\n\n          ...(isDebugStaticShell || isDebugDynamicAccesses\n            ? {\n                nextExport: true,\n                supportsDynamicResponse: false,\n                isStaticGeneration: true,\n                isRevalidate: true,\n                isDebugDynamicAccesses: isDebugDynamicAccesses,\n              }\n            : {}),\n\n          experimental: {\n            isRoutePPREnabled,\n            expireTime: nextConfig.expireTime,\n            staleTimes: nextConfig.experimental.staleTimes,\n            cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n            clientSegmentCache: Boolean(\n              nextConfig.experimental.clientSegmentCache\n            ),\n            clientParamParsing: Boolean(\n              nextConfig.experimental.clientParamParsing\n            ),\n            dynamicOnHover: Boolean(nextConfig.experimental.dynamicOnHover),\n            inlineCss: Boolean(nextConfig.experimental.inlineCss),\n            authInterrupts: Boolean(nextConfig.experimental.authInterrupts),\n            clientTraceMetadata:\n              nextConfig.experimental.clientTraceMetadata || ([] as any),\n          },\n\n          waitUntil: ctx.waitUntil,\n          onClose: (cb) => {\n            res.on('close', cb)\n          },\n          onAfterTaskError: () => {},\n\n          onInstrumentationRequestError: (error, _request, errorContext) =>\n            routeModule.onRequestError(\n              req,\n              error,\n              errorContext,\n              routerServerContext\n            ),\n          err: getRequestMeta(req, 'invokeError'),\n          dev: routeModule.isDev,\n        },\n      }\n\n      const result = await invokeRouteModule(span, context)\n\n      const { metadata } = result\n\n      const {\n        cacheControl,\n        headers = {},\n        // Add any fetch tags that were on the page to the response headers.\n        fetchTags: cacheTags,\n      } = metadata\n\n      if (cacheTags) {\n        headers[NEXT_CACHE_TAGS_HEADER] = cacheTags\n      }\n\n      // Pull any fetch metrics from the render onto the request.\n      ;(req as any).fetchMetrics = metadata.fetchMetrics\n\n      // we don't throw static to dynamic errors in dev as isSSG\n      // is a best guess in dev since we don't have the prerender pass\n      // to know whether the path is actually static or not\n      if (\n        isSSG &&\n        cacheControl?.revalidate === 0 &&\n        !routeModule.isDev &&\n        !isRoutePPREnabled\n      ) {\n        const staticBailoutInfo = metadata.staticBailoutInfo\n\n        const err = new Error(\n          `Page changed from static to dynamic at runtime ${resolvedPathname}${\n            staticBailoutInfo?.description\n              ? `, reason: ${staticBailoutInfo.description}`\n              : ``\n          }` +\n            `\\nsee more here https://nextjs.org/docs/messages/app-static-to-dynamic-error`\n        )\n\n        if (staticBailoutInfo?.stack) {\n          const stack = staticBailoutInfo.stack\n          err.stack = err.message + stack.substring(stack.indexOf('\\n'))\n        }\n\n        throw err\n      }\n\n      return {\n        value: {\n          kind: CachedRouteKind.APP_PAGE,\n          html: result,\n          headers,\n          rscData: metadata.flightData,\n          postponed: metadata.postponed,\n          status: metadata.statusCode,\n          segmentData: metadata.segmentData,\n        } satisfies CachedAppPageValue,\n        cacheControl,\n      } satisfies ResponseCacheEntry\n    }\n\n    const responseGenerator: ResponseGenerator = async ({\n      hasResolved,\n      previousCacheEntry,\n      isRevalidating,\n      span,\n    }) => {\n      const isProduction = routeModule.isDev === false\n      const didRespond = hasResolved || res.writableEnded\n\n      // skip on-demand revalidate if cache is not present and\n      // revalidate-if-generated is set\n      if (\n        isOnDemandRevalidate &&\n        revalidateOnlyGenerated &&\n        !previousCacheEntry &&\n        !minimalMode\n      ) {\n        if (routerServerContext?.render404) {\n          await routerServerContext.render404(req, res)\n        } else {\n          res.statusCode = 404\n          res.end('This page could not be found')\n        }\n        return null\n      }\n\n      let fallbackMode: FallbackMode | undefined\n\n      if (prerenderInfo) {\n        fallbackMode = parseFallbackField(prerenderInfo.fallback)\n      }\n\n      // When serving a HTML bot request, we want to serve a blocking render and\n      // not the prerendered page. This ensures that the correct content is served\n      // to the bot in the head.\n      if (fallbackMode === FallbackMode.PRERENDER && isBot(userAgent)) {\n        if (!isRoutePPREnabled || isHtmlBot) {\n          fallbackMode = FallbackMode.BLOCKING_STATIC_RENDER\n        }\n      }\n\n      if (previousCacheEntry?.isStale === -1) {\n        isOnDemandRevalidate = true\n      }\n\n      // TODO: adapt for PPR\n      // only allow on-demand revalidate for fallback: true/blocking\n      // or for prerendered fallback: false paths\n      if (\n        isOnDemandRevalidate &&\n        (fallbackMode !== FallbackMode.NOT_FOUND || previousCacheEntry)\n      ) {\n        fallbackMode = FallbackMode.BLOCKING_STATIC_RENDER\n      }\n\n      if (\n        !minimalMode &&\n        fallbackMode !== FallbackMode.BLOCKING_STATIC_RENDER &&\n        staticPathKey &&\n        !didRespond &&\n        !isDraftMode &&\n        pageIsDynamic &&\n        (isProduction || !isPrerendered)\n      ) {\n        // if the page has dynamicParams: false and this pathname wasn't\n        // prerendered trigger the no fallback handling\n        if (\n          // In development, fall through to render to handle missing\n          // getStaticPaths.\n          (isProduction || prerenderInfo) &&\n          // When fallback isn't present, abort this render so we 404\n          fallbackMode === FallbackMode.NOT_FOUND\n        ) {\n          throw new NoFallbackError()\n        }\n\n        let fallbackResponse: ResponseCacheEntry | null | undefined\n\n        if (isRoutePPREnabled && !isRSCRequest) {\n          const cacheKey =\n            typeof prerenderInfo?.fallback === 'string'\n              ? prerenderInfo.fallback\n              : isProduction\n                ? normalizedSrcPage\n                : null\n\n          // We use the response cache here to handle the revalidation and\n          // management of the fallback shell.\n          fallbackResponse = await routeModule.handleResponse({\n            cacheKey,\n            req,\n            nextConfig,\n            routeKind: RouteKind.APP_PAGE,\n            isFallback: true,\n            prerenderManifest,\n            isRoutePPREnabled,\n            responseGenerator: async () =>\n              doRender({\n                span,\n                // We pass `undefined` as rendering a fallback isn't resumed\n                // here.\n                postponed: undefined,\n                fallbackRouteParams:\n                  // If we're in production or we're debugging the fallback\n                  // shell then we should postpone when dynamic params are\n                  // accessed.\n                  isProduction || isDebugFallbackShell\n                    ? getFallbackRouteParams(normalizedSrcPage)\n                    : null,\n              }),\n            waitUntil: ctx.waitUntil,\n          })\n\n          // If the fallback response was set to null, then we should return null.\n          if (fallbackResponse === null) return null\n\n          // Otherwise, if we did get a fallback response, we should return it.\n          if (fallbackResponse) {\n            // Remove the cache control from the response to prevent it from being\n            // used in the surrounding cache.\n            delete fallbackResponse.cacheControl\n\n            return fallbackResponse\n          }\n        }\n      }\n      // Only requests that aren't revalidating can be resumed. If we have the\n      // minimal postponed data, then we should resume the render with it.\n      const postponed =\n        !isOnDemandRevalidate && !isRevalidating && minimalPostponed\n          ? minimalPostponed\n          : undefined\n\n      // When we're in minimal mode, if we're trying to debug the static shell,\n      // we should just return nothing instead of resuming the dynamic render.\n      if (\n        (isDebugStaticShell || isDebugDynamicAccesses) &&\n        typeof postponed !== 'undefined'\n      ) {\n        return {\n          cacheControl: { revalidate: 1, expire: undefined },\n          value: {\n            kind: CachedRouteKind.PAGES,\n            html: RenderResult.EMPTY,\n            pageData: {},\n            headers: undefined,\n            status: undefined,\n          } satisfies CachedPageValue,\n        }\n      }\n\n      // If this is a dynamic route with PPR enabled and the default route\n      // matches were set, then we should pass the fallback route params to\n      // the renderer as this is a fallback revalidation request.\n      const fallbackRouteParams =\n        pageIsDynamic &&\n        isRoutePPREnabled &&\n        (getRequestMeta(req, 'renderFallbackShell') || isDebugFallbackShell)\n          ? getFallbackRouteParams(pathname)\n          : null\n\n      // Perform the render.\n      return doRender({\n        span,\n        postponed,\n        fallbackRouteParams,\n      })\n    }\n\n    const handleResponse = async (span?: Span): Promise<null | void> => {\n      const cacheEntry = await routeModule.handleResponse({\n        cacheKey: ssgCacheKey,\n        responseGenerator: (c) =>\n          responseGenerator({\n            span,\n            ...c,\n          }),\n        routeKind: RouteKind.APP_PAGE,\n        isOnDemandRevalidate,\n        isRoutePPREnabled,\n        req,\n        nextConfig,\n        prerenderManifest,\n        waitUntil: ctx.waitUntil,\n      })\n\n      if (isDraftMode) {\n        res.setHeader(\n          'Cache-Control',\n          'private, no-cache, no-store, max-age=0, must-revalidate'\n        )\n      }\n\n      // In dev, we should not cache pages for any reason.\n      if (routeModule.isDev) {\n        res.setHeader('Cache-Control', 'no-store, must-revalidate')\n      }\n\n      if (!cacheEntry) {\n        if (ssgCacheKey) {\n          // A cache entry might not be generated if a response is written\n          // in `getInitialProps` or `getServerSideProps`, but those shouldn't\n          // have a cache key. If we do have a cache key but we don't end up\n          // with a cache entry, then either Next.js or the application has a\n          // bug that needs fixing.\n          throw new Error('invariant: cache entry required but not generated')\n        }\n        return null\n      }\n\n      if (cacheEntry.value?.kind !== CachedRouteKind.APP_PAGE) {\n        throw new Error(\n          `Invariant app-page handler received invalid cache entry ${cacheEntry.value?.kind}`\n        )\n      }\n\n      const didPostpone = typeof cacheEntry.value.postponed === 'string'\n\n      if (\n        isSSG &&\n        // We don't want to send a cache header for requests that contain dynamic\n        // data. If this is a Dynamic RSC request or wasn't a Prefetch RSC\n        // request, then we should set the cache header.\n        !isDynamicRSCRequest &&\n        (!didPostpone || isPrefetchRSCRequest)\n      ) {\n        if (!minimalMode) {\n          // set x-nextjs-cache header to match the header\n          // we set for the image-optimizer\n          res.setHeader(\n            'x-nextjs-cache',\n            isOnDemandRevalidate\n              ? 'REVALIDATED'\n              : cacheEntry.isMiss\n                ? 'MISS'\n                : cacheEntry.isStale\n                  ? 'STALE'\n                  : 'HIT'\n          )\n        }\n        // Set a header used by the client router to signal the response is static\n        // and should respect the `static` cache staleTime value.\n        res.setHeader(NEXT_IS_PRERENDER_HEADER, '1')\n      }\n      const { value: cachedData } = cacheEntry\n\n      // Coerce the cache control parameter from the render.\n      let cacheControl: CacheControl | undefined\n\n      // If this is a resume request in minimal mode it is streamed with dynamic\n      // content and should not be cached.\n      if (minimalPostponed) {\n        cacheControl = { revalidate: 0, expire: undefined }\n      }\n\n      // If this is in minimal mode and this is a flight request that isn't a\n      // prefetch request while PPR is enabled, it cannot be cached as it contains\n      // dynamic content.\n      else if (\n        minimalMode &&\n        isRSCRequest &&\n        !isPrefetchRSCRequest &&\n        isRoutePPREnabled\n      ) {\n        cacheControl = { revalidate: 0, expire: undefined }\n      } else if (!routeModule.isDev) {\n        // If this is a preview mode request, we shouldn't cache it\n        if (isDraftMode) {\n          cacheControl = { revalidate: 0, expire: undefined }\n        }\n\n        // If this isn't SSG, then we should set change the header only if it is\n        // not set already.\n        else if (!isSSG) {\n          if (!res.getHeader('Cache-Control')) {\n            cacheControl = { revalidate: 0, expire: undefined }\n          }\n        } else if (cacheEntry.cacheControl) {\n          // If the cache entry has a cache control with a revalidate value that's\n          // a number, use it.\n          if (typeof cacheEntry.cacheControl.revalidate === 'number') {\n            if (cacheEntry.cacheControl.revalidate < 1) {\n              throw new Error(\n                `Invalid revalidate configuration provided: ${cacheEntry.cacheControl.revalidate} < 1`\n              )\n            }\n\n            cacheControl = {\n              revalidate: cacheEntry.cacheControl.revalidate,\n              expire: cacheEntry.cacheControl?.expire ?? nextConfig.expireTime,\n            }\n          }\n          // Otherwise if the revalidate value is false, then we should use the\n          // cache time of one year.\n          else {\n            cacheControl = { revalidate: CACHE_ONE_YEAR, expire: undefined }\n          }\n        }\n      }\n\n      cacheEntry.cacheControl = cacheControl\n\n      if (\n        typeof segmentPrefetchHeader === 'string' &&\n        cachedData?.kind === CachedRouteKind.APP_PAGE &&\n        cachedData.segmentData\n      ) {\n        // This is a prefetch request issued by the client Segment Cache. These\n        // should never reach the application layer (lambda). We should either\n        // respond from the cache (HIT) or respond with 204 No Content (MISS).\n\n        // Set a header to indicate that PPR is enabled for this route. This\n        // lets the client distinguish between a regular cache miss and a cache\n        // miss due to PPR being disabled. In other contexts this header is used\n        // to indicate that the response contains dynamic data, but here we're\n        // only using it to indicate that the feature is enabled — the segment\n        // response itself contains whether the data is dynamic.\n        res.setHeader(NEXT_DID_POSTPONE_HEADER, '2')\n\n        // Add the cache tags header to the response if it exists and we're in\n        // minimal mode while rendering a static page.\n        const tags = cachedData.headers?.[NEXT_CACHE_TAGS_HEADER]\n        if (minimalMode && isSSG && tags && typeof tags === 'string') {\n          res.setHeader(NEXT_CACHE_TAGS_HEADER, tags)\n        }\n\n        const matchedSegment = cachedData.segmentData.get(segmentPrefetchHeader)\n        if (matchedSegment !== undefined) {\n          // Cache hit\n          return sendRenderResult({\n            req,\n            res,\n            generateEtags: nextConfig.generateEtags,\n            poweredByHeader: nextConfig.poweredByHeader,\n            result: RenderResult.fromStatic(\n              matchedSegment,\n              RSC_CONTENT_TYPE_HEADER\n            ),\n            cacheControl: cacheEntry.cacheControl,\n          })\n        }\n\n        // Cache miss. Either a cache entry for this route has not been generated\n        // (which technically should not be possible when PPR is enabled, because\n        // at a minimum there should always be a fallback entry) or there's no\n        // match for the requested segment. Respond with a 204 No Content. We\n        // don't bother to respond with 404, because these requests are only\n        // issued as part of a prefetch.\n        res.statusCode = 204\n        return sendRenderResult({\n          req,\n          res,\n          generateEtags: nextConfig.generateEtags,\n          poweredByHeader: nextConfig.poweredByHeader,\n          result: RenderResult.EMPTY,\n          cacheControl: cacheEntry.cacheControl,\n        })\n      }\n\n      // If there's a callback for `onCacheEntry`, call it with the cache entry\n      // and the revalidate options.\n      const onCacheEntry = getRequestMeta(req, 'onCacheEntry')\n      if (onCacheEntry) {\n        const finished = await onCacheEntry(\n          {\n            ...cacheEntry,\n            // TODO: remove this when upstream doesn't\n            // always expect this value to be \"PAGE\"\n            value: {\n              ...cacheEntry.value,\n              kind: 'PAGE',\n            },\n          },\n          {\n            url: getRequestMeta(req, 'initURL'),\n          }\n        )\n        if (finished) {\n          // TODO: maybe we have to end the request?\n          return null\n        }\n      }\n\n      // If the request has a postponed state and it's a resume request we\n      // should error.\n      if (didPostpone && minimalPostponed) {\n        throw new Error(\n          'Invariant: postponed state should not be present on a resume request'\n        )\n      }\n\n      if (cachedData.headers) {\n        const headers = { ...cachedData.headers }\n\n        if (!minimalMode || !isSSG) {\n          delete headers[NEXT_CACHE_TAGS_HEADER]\n        }\n\n        for (let [key, value] of Object.entries(headers)) {\n          if (typeof value === 'undefined') continue\n\n          if (Array.isArray(value)) {\n            for (const v of value) {\n              res.appendHeader(key, v)\n            }\n          } else if (typeof value === 'number') {\n            value = value.toString()\n            res.appendHeader(key, value)\n          } else {\n            res.appendHeader(key, value)\n          }\n        }\n      }\n\n      // Add the cache tags header to the response if it exists and we're in\n      // minimal mode while rendering a static page.\n      const tags = cachedData.headers?.[NEXT_CACHE_TAGS_HEADER]\n      if (minimalMode && isSSG && tags && typeof tags === 'string') {\n        res.setHeader(NEXT_CACHE_TAGS_HEADER, tags)\n      }\n\n      // If the request is a data request, then we shouldn't set the status code\n      // from the response because it should always be 200. This should be gated\n      // behind the experimental PPR flag.\n      if (cachedData.status && (!isRSCRequest || !isRoutePPREnabled)) {\n        res.statusCode = cachedData.status\n      }\n\n      // Redirect information is encoded in RSC payload, so we don't need to use redirect status codes\n      if (\n        !minimalMode &&\n        cachedData.status &&\n        RedirectStatusCode[cachedData.status] &&\n        isRSCRequest\n      ) {\n        res.statusCode = 200\n      }\n\n      // Mark that the request did postpone.\n      if (didPostpone) {\n        res.setHeader(NEXT_DID_POSTPONE_HEADER, '1')\n      }\n\n      // we don't go through this block when preview mode is true\n      // as preview mode is a dynamic request (bypasses cache) and doesn't\n      // generate both HTML and payloads in the same request so continue to just\n      // return the generated payload\n      if (isRSCRequest && !isDraftMode) {\n        // If this is a dynamic RSC request, then stream the response.\n        if (typeof cachedData.rscData === 'undefined') {\n          if (cachedData.postponed) {\n            throw new Error('Invariant: Expected postponed to be undefined')\n          }\n\n          return sendRenderResult({\n            req,\n            res,\n            generateEtags: nextConfig.generateEtags,\n            poweredByHeader: nextConfig.poweredByHeader,\n            result: cachedData.html,\n            // Dynamic RSC responses cannot be cached, even if they're\n            // configured with `force-static` because we have no way of\n            // distinguishing between `force-static` and pages that have no\n            // postponed state.\n            // TODO: distinguish `force-static` from pages with no postponed state (static)\n            cacheControl: isDynamicRSCRequest\n              ? { revalidate: 0, expire: undefined }\n              : cacheEntry.cacheControl,\n          })\n        }\n\n        // As this isn't a prefetch request, we should serve the static flight\n        // data.\n        return sendRenderResult({\n          req,\n          res,\n          generateEtags: nextConfig.generateEtags,\n          poweredByHeader: nextConfig.poweredByHeader,\n          result: RenderResult.fromStatic(\n            cachedData.rscData,\n            RSC_CONTENT_TYPE_HEADER\n          ),\n          cacheControl: cacheEntry.cacheControl,\n        })\n      }\n\n      // This is a request for HTML data.\n      let body = cachedData.html\n\n      // If there's no postponed state, we should just serve the HTML. This\n      // should also be the case for a resume request because it's completed\n      // as a server render (rather than a static render).\n      if (!didPostpone || minimalMode || isRSCRequest) {\n        // If we're in test mode, we should add a sentinel chunk to the response\n        // that's between the static and dynamic parts so we can compare the\n        // chunks and add assertions.\n        if (\n          process.env.__NEXT_TEST_MODE &&\n          minimalMode &&\n          isRoutePPREnabled &&\n          body.contentType === HTML_CONTENT_TYPE_HEADER\n        ) {\n          // As we're in minimal mode, the static part would have already been\n          // streamed first. The only part that this streams is the dynamic part\n          // so we should FIRST stream the sentinel and THEN the dynamic part.\n          body.unshift(createPPRBoundarySentinel())\n        }\n\n        return sendRenderResult({\n          req,\n          res,\n          generateEtags: nextConfig.generateEtags,\n          poweredByHeader: nextConfig.poweredByHeader,\n          result: body,\n          cacheControl: cacheEntry.cacheControl,\n        })\n      }\n\n      // If we're debugging the static shell or the dynamic API accesses, we\n      // should just serve the HTML without resuming the render. The returned\n      // HTML will be the static shell so all the Dynamic API's will be used\n      // during static generation.\n      if (isDebugStaticShell || isDebugDynamicAccesses) {\n        // Since we're not resuming the render, we need to at least add the\n        // closing body and html tags to create valid HTML.\n        body.push(\n          new ReadableStream({\n            start(controller) {\n              controller.enqueue(ENCODED_TAGS.CLOSED.BODY_AND_HTML)\n              controller.close()\n            },\n          })\n        )\n\n        return sendRenderResult({\n          req,\n          res,\n          generateEtags: nextConfig.generateEtags,\n          poweredByHeader: nextConfig.poweredByHeader,\n          result: body,\n          cacheControl: { revalidate: 0, expire: undefined },\n        })\n      }\n\n      // If we're in test mode, we should add a sentinel chunk to the response\n      // that's between the static and dynamic parts so we can compare the\n      // chunks and add assertions.\n      if (process.env.__NEXT_TEST_MODE) {\n        body.push(createPPRBoundarySentinel())\n      }\n\n      // This request has postponed, so let's create a new transformer that the\n      // dynamic data can pipe to that will attach the dynamic data to the end\n      // of the response.\n      const transformer = new TransformStream<Uint8Array, Uint8Array>()\n      body.push(transformer.readable)\n\n      // Perform the render again, but this time, provide the postponed state.\n      // We don't await because we want the result to start streaming now, and\n      // we've already chained the transformer's readable to the render result.\n      doRender({\n        span,\n        postponed: cachedData.postponed,\n        // This is a resume render, not a fallback render, so we don't need to\n        // set this.\n        fallbackRouteParams: null,\n      })\n        .then(async (result) => {\n          if (!result) {\n            throw new Error('Invariant: expected a result to be returned')\n          }\n\n          if (result.value?.kind !== CachedRouteKind.APP_PAGE) {\n            throw new Error(\n              `Invariant: expected a page response, got ${result.value?.kind}`\n            )\n          }\n\n          // Pipe the resume result to the transformer.\n          await result.value.html.pipeTo(transformer.writable)\n        })\n        .catch((err) => {\n          // An error occurred during piping or preparing the render, abort\n          // the transformers writer so we can terminate the stream.\n          transformer.writable.abort(err).catch((e) => {\n            console.error(\"couldn't abort transformer\", e)\n          })\n        })\n\n      return sendRenderResult({\n        req,\n        res,\n        generateEtags: nextConfig.generateEtags,\n        poweredByHeader: nextConfig.poweredByHeader,\n        result: body,\n        // We don't want to cache the response if it has postponed data because\n        // the response being sent to the client it's dynamic parts are streamed\n        // to the client on the same request.\n        cacheControl: { revalidate: 0, expire: undefined },\n      })\n    }\n\n    // TODO: activeSpan code path is for when wrapped by\n    // next-server can be removed when this is no longer used\n    if (activeSpan) {\n      await handleResponse(activeSpan)\n    } else {\n      return await tracer.withPropagatedContext(req.headers, () =>\n        tracer.trace(\n          BaseServerSpan.handleRequest,\n          {\n            spanName: `${method} ${req.url}`,\n            kind: SpanKind.SERVER,\n            attributes: {\n              'http.method': method,\n              'http.target': req.url,\n            },\n          },\n          handleResponse\n        )\n      )\n    }\n  } catch (err) {\n    if (!(err instanceof NoFallbackError)) {\n      await routeModule.onRequestError(\n        req,\n        err,\n        {\n          routerKind: 'App Router',\n          routePath: srcPage,\n          routeType: 'render',\n          revalidateReason: getRevalidateReason({\n            isRevalidate: isSSG,\n            isOnDemandRevalidate,\n          }),\n        },\n        routerServerContext\n      )\n    }\n\n    // rethrow so that we can handle serving error page\n    throw err\n  }\n}\n\n// TODO: omit this from production builds, only test builds should include it\n/**\n * Creates a readable stream that emits a PPR boundary sentinel.\n *\n * @returns A readable stream that emits a PPR boundary sentinel.\n */\nfunction createPPRBoundarySentinel() {\n  return new ReadableStream({\n    start(controller) {\n      controller.enqueue(\n        new TextEncoder().encode('<!-- PPR_BOUNDARY_SENTINEL -->')\n      )\n      controller.close()\n    },\n  })\n}\n"],"names":["AppPageRouteModule","RouteKind","getRevalidateReason","getTracer","SpanKind","getRequestMeta","BaseServerSpan","interopDefault","stripFlightHeaders","NodeNextRequest","NodeNextResponse","checkIsAppPPREnabled","getFallbackRouteParams","setReferenceManifestsSingleton","isHtmlBotRequest","shouldServeStreamingMetadata","createServerModuleMap","normalizeAppPath","getIsPossibleServerAction","RSC_HEADER","NEXT_ROUTER_PREFETCH_HEADER","NEXT_IS_PRERENDER_HEADER","NEXT_DID_POSTPONE_HEADER","RSC_CONTENT_TYPE_HEADER","getBotType","isBot","CachedRouteKind","FallbackMode","parseFallbackField","RenderResult","CACHE_ONE_YEAR","HTML_CONTENT_TYPE_HEADER","NEXT_CACHE_TAGS_HEADER","ENCODED_TAGS","sendRenderResult","NoFallbackError","tree","pages","GlobalError","__next_app__","require","__next_app_require__","loadChunk","__next_app_load_chunk__","entryBase","RedirectStatusCode","routeModule","definition","kind","APP_PAGE","page","pathname","bundlePath","filename","appPaths","userland","loaderTree","distDir","process","env","__NEXT_RELATIVE_DIST_DIR","relativeProjectDir","__NEXT_RELATIVE_PROJECT_DIR","handler","req","res","ctx","prerenderManifest","srcPage","TURBOPACK","replace","multiZoneDraftMode","__NEXT_MULTI_ZONE_DRAFT_MODE","initialPostponed","minimalMode","prepareResult","prepare","statusCode","end","waitUntil","Promise","resolve","buildId","query","params","parsedUrl","pageIsDynamic","buildManifest","nextFontManifest","reactLoadableManifest","serverActionsManifest","clientReferenceManifest","subresourceIntegrityManifest","isDraftMode","resolvedPathname","revalidateOnlyGenerated","routerServerContext","nextConfig","interceptionRoutePatterns","normalizedSrcPage","isOnDemandRevalidate","prerenderInfo","match","isPrerendered","routes","isSSG","Boolean","userAgent","headers","botType","isHtmlBot","isPrefetchRSCRequest","isRSCRequest","isPossibleServerAction","couldSupportPPR","experimental","ppr","hasDebugStaticShellQuery","__NEXT_EXPERIMENTAL_STATIC_SHELL_DEBUGGING","__nextppronly","hasDebugFallbackShellQuery","isRoutePPREnabled","dynamicRoutes","renderingMode","isDev","experimentalTestProxy","isDebugStaticShell","isDebugDynamicAccesses","isDebugFallbackShell","minimalPostponed","undefined","isDynamicRSCRequest","segmentPrefetchHeader","serveStreamingMetadata","htmlLimitedBots","supportsDynamicResponse","shouldWaitOnAllReady","ssgCacheKey","staticPathKey","ComponentMod","serverModuleMap","method","tracer","activeSpan","getActiveScopeSpan","varyHeader","getVaryHeader","setHeader","invokeRouteModule","span","context","nextReq","nextRes","NODE_ENV","cacheComponents","renderOpts","warmup","metadata","renderResumeDataCache","render","finally","setAttributes","rootSpanAttributes","getRootSpanAttributes","get","handleRequest","console","warn","route","name","updateName","url","doRender","postponed","fallbackRouteParams","sharedContext","serverComponentsHmrCache","App","Document","pageConfig","Component","setIsrStatus","dir","NEXT_RUNTIME","join","cwd","isRevalidate","assetPrefix","nextConfigOutput","output","crossOrigin","trailingSlash","previewProps","preview","deploymentId","enableTainting","taint","devtoolSegmentExplorer","reactMaxHeadersLength","incrementalCache","cacheLifeProfiles","cacheLife","basePath","serverActions","nextExport","isStaticGeneration","expireTime","staleTimes","clientSegmentCache","clientParamParsing","dynamicOnHover","inlineCss","authInterrupts","clientTraceMetadata","onClose","cb","on","onAfterTaskError","onInstrumentationRequestError","error","_request","errorContext","onRequestError","err","dev","result","cacheControl","fetchTags","cacheTags","fetchMetrics","revalidate","staticBailoutInfo","Error","description","stack","message","substring","indexOf","value","html","rscData","flightData","status","segmentData","responseGenerator","hasResolved","previousCacheEntry","isRevalidating","isProduction","didRespond","writableEnded","render404","fallbackMode","fallback","PRERENDER","BLOCKING_STATIC_RENDER","isStale","NOT_FOUND","fallbackResponse","cacheKey","handleResponse","routeKind","isFallback","expire","PAGES","EMPTY","pageData","cacheEntry","cachedData","c","didPostpone","isMiss","getHeader","tags","matchedSegment","generateEtags","poweredByHeader","fromStatic","onCacheEntry","finished","key","Object","entries","Array","isArray","v","appendHeader","toString","body","__NEXT_TEST_MODE","contentType","unshift","createPPRBoundarySentinel","push","ReadableStream","start","controller","enqueue","CLOSED","BODY_AND_HTML","close","transformer","TransformStream","readable","then","pipeTo","writable","catch","abort","e","withPropagatedContext","trace","spanName","SERVER","attributes","routerKind","routePath","routeType","revalidateReason","TextEncoder","encode"],"mappings":"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","ignoreList":[0]}