{"version":3,"sources":["turbopack:///[project]/node_modules/next/dist/src/build/templates/app-page.ts"],"sourcesContent":["import type { LoaderTree } from '../../server/lib/app-dir-module'\nimport type { IncomingMessage, ServerResponse } from 'node:http'\n\nimport {\n  AppPageRouteModule,\n  type AppPageRouteHandlerContext,\n} from '../../server/route-modules/app-page/module.compiled' with { 'turbopack-transition': 'next-ssr' }\n\nimport { RouteKind } from '../../server/route-kind' with { 'turbopack-transition': 'next-server-utility' }\n\nimport { getRevalidateReason } from '../../server/instrumentation/utils'\nimport { getTracer, SpanKind, type Span } from '../../server/lib/trace/tracer'\nimport { getRequestMeta } from '../../server/request-meta'\nimport { BaseServerSpan } from '../../server/lib/trace/constants'\nimport { interopDefault } from '../../server/app-render/interop-default'\nimport { stripFlightHeaders } from '../../server/app-render/strip-flight-headers'\nimport { NodeNextRequest, NodeNextResponse } from '../../server/base-http/node'\nimport { checkIsAppPPREnabled } from '../../server/lib/experimental/ppr'\nimport {\n  getFallbackRouteParams,\n  type FallbackRouteParams,\n} from '../../server/request/fallback-params'\nimport { setReferenceManifestsSingleton } from '../../server/app-render/encryption-utils'\nimport {\n  isHtmlBotRequest,\n  shouldServeStreamingMetadata,\n} from '../../server/lib/streaming-metadata'\nimport { createServerModuleMap } from '../../server/app-render/action-utils'\nimport { normalizeAppPath } from '../../shared/lib/router/utils/app-paths'\nimport { getIsPossibleServerAction } from '../../server/lib/server-action-request-meta'\nimport {\n  RSC_HEADER,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_IS_PRERENDER_HEADER,\n  NEXT_DID_POSTPONE_HEADER,\n  RSC_CONTENT_TYPE_HEADER,\n} from '../../client/components/app-router-headers'\nimport { getBotType, isBot } from '../../shared/lib/router/utils/is-bot'\nimport {\n  CachedRouteKind,\n  type CachedAppPageValue,\n  type CachedPageValue,\n  type ResponseCacheEntry,\n  type ResponseGenerator,\n} from '../../server/response-cache'\nimport { FallbackMode, parseFallbackField } from '../../lib/fallback'\nimport RenderResult from '../../server/render-result'\nimport {\n  CACHE_ONE_YEAR,\n  HTML_CONTENT_TYPE_HEADER,\n  NEXT_CACHE_TAGS_HEADER,\n} from '../../lib/constants'\nimport type { CacheControl } from '../../server/lib/cache-control'\nimport { ENCODED_TAGS } from '../../server/stream-utils/encoded-tags'\nimport { sendRenderResult } from '../../server/send-payload'\nimport { NoFallbackError } from '../../shared/lib/no-fallback-error.external'\n\n// These are injected by the loader afterwards.\n\n/**\n * The tree created in next-app-loader that holds component segments and modules\n * and I've updated it.\n */\ndeclare const tree: LoaderTree\ndeclare const pages: any\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\n// INJECT:tree\n// INJECT:pages\n\nexport { tree, pages }\n\nimport GlobalError from 'VAR_MODULE_GLOBAL_ERROR' with { 'turbopack-transition': 'next-server-utility' }\n\nexport { GlobalError }\n\n// These are injected by the loader afterwards.\ndeclare const __next_app_require__: (id: string | number) => unknown\ndeclare const __next_app_load_chunk__: (id: string | number) => Promise<unknown>\n\n// INJECT:__next_app_require__\n// INJECT:__next_app_load_chunk__\n\nexport const __next_app__ = {\n  require: __next_app_require__,\n  loadChunk: __next_app_load_chunk__,\n}\n\nimport * as entryBase from '../../server/app-render/entry-base' with { 'turbopack-transition': 'next-server-utility' }\nimport { RedirectStatusCode } from '../../client/components/redirect-status-code'\n\nexport * from '../../server/app-render/entry-base' with { 'turbopack-transition': 'next-server-utility' }\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new AppPageRouteModule({\n  definition: {\n    kind: RouteKind.APP_PAGE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n    appPaths: [],\n  },\n  userland: {\n    loaderTree: tree,\n  },\n  distDir: process.env.__NEXT_RELATIVE_DIST_DIR || '',\n  relativeProjectDir: process.env.__NEXT_RELATIVE_PROJECT_DIR || '',\n})\n\nexport async function handler(\n  req: IncomingMessage,\n  res: ServerResponse,\n  ctx: {\n    waitUntil: (prom: Promise<void>) => void\n  }\n) {\n  let srcPage = 'VAR_DEFINITION_PAGE'\n\n  // turbopack doesn't normalize `/index` in the page name\n  // so we need to to process dynamic routes properly\n  // TODO: fix turbopack providing differing value from webpack\n  if (process.env.TURBOPACK) {\n    srcPage = srcPage.replace(/\\/index$/, '') || '/'\n  } else if (srcPage === '/index') {\n    // we always normalize /index specifically\n    srcPage = '/'\n  }\n  const multiZoneDraftMode = process.env\n    .__NEXT_MULTI_ZONE_DRAFT_MODE as any as boolean\n\n  const initialPostponed = getRequestMeta(req, 'postponed')\n  // TODO: replace with more specific flags\n  const minimalMode = getRequestMeta(req, 'minimalMode')\n\n  const prepareResult = await routeModule.prepare(req, res, {\n    srcPage,\n    multiZoneDraftMode,\n  })\n\n  if (!prepareResult) {\n    res.statusCode = 400\n    res.end('Bad Request')\n    ctx.waitUntil?.(Promise.resolve())\n    return null\n  }\n\n  const {\n    buildId,\n    query,\n    params,\n    parsedUrl,\n    pageIsDynamic,\n    buildManifest,\n    nextFontManifest,\n    reactLoadableManifest,\n    serverActionsManifest,\n    clientReferenceManifest,\n    subresourceIntegrityManifest,\n    prerenderManifest,\n    isDraftMode,\n    resolvedPathname,\n    revalidateOnlyGenerated,\n    routerServerContext,\n    nextConfig,\n    interceptionRoutePatterns,\n  } = prepareResult\n\n  const pathname = parsedUrl.pathname || '/'\n  const normalizedSrcPage = normalizeAppPath(srcPage)\n\n  let { isOnDemandRevalidate } = prepareResult\n\n  const prerenderInfo = routeModule.match(pathname, prerenderManifest)\n  const isPrerendered = !!prerenderManifest.routes[resolvedPathname]\n\n  let isSSG = Boolean(\n    prerenderInfo ||\n      isPrerendered ||\n      prerenderManifest.routes[normalizedSrcPage]\n  )\n\n  const userAgent = req.headers['user-agent'] || ''\n  const botType = getBotType(userAgent)\n  const isHtmlBot = isHtmlBotRequest(req)\n\n  /**\n   * If true, this indicates that the request being made is for an app\n   * prefetch request.\n   */\n  const isPrefetchRSCRequest =\n    getRequestMeta(req, 'isPrefetchRSCRequest') ??\n    req.headers[NEXT_ROUTER_PREFETCH_HEADER] === '1' // exclude runtime prefetches, which use '2'\n\n  // NOTE: Don't delete headers[RSC] yet, it still needs to be used in renderToHTML later\n\n  const isRSCRequest =\n    getRequestMeta(req, 'isRSCRequest') ?? Boolean(req.headers[RSC_HEADER])\n\n  const isPossibleServerAction = getIsPossibleServerAction(req)\n\n  /**\n   * If the route being rendered is an app page, and the ppr feature has been\n   * enabled, then the given route _could_ support PPR.\n   */\n  const couldSupportPPR: boolean = checkIsAppPPREnabled(\n    nextConfig.experimental.ppr\n  )\n\n  // When enabled, this will allow the use of the `?__nextppronly` query to\n  // enable debugging of the static shell.\n  const hasDebugStaticShellQuery =\n    process.env.__NEXT_EXPERIMENTAL_STATIC_SHELL_DEBUGGING === '1' &&\n    typeof query.__nextppronly !== 'undefined' &&\n    couldSupportPPR\n\n  // When enabled, this will allow the use of the `?__nextppronly` query\n  // to enable debugging of the fallback shell.\n  const hasDebugFallbackShellQuery =\n    hasDebugStaticShellQuery && query.__nextppronly === 'fallback'\n\n  // This page supports PPR if it is marked as being `PARTIALLY_STATIC` in the\n  // prerender manifest and this is an app page.\n  const isRoutePPREnabled: boolean =\n    couldSupportPPR &&\n    ((\n      prerenderManifest.routes[normalizedSrcPage] ??\n      prerenderManifest.dynamicRoutes[normalizedSrcPage]\n    )?.renderingMode === 'PARTIALLY_STATIC' ||\n      // Ideally we'd want to check the appConfig to see if this page has PPR\n      // enabled or not, but that would require plumbing the appConfig through\n      // to the server during development. We assume that the page supports it\n      // but only during development.\n      (hasDebugStaticShellQuery &&\n        (routeModule.isDev === true ||\n          routerServerContext?.experimentalTestProxy === true)))\n\n  const isDebugStaticShell: boolean =\n    hasDebugStaticShellQuery && isRoutePPREnabled\n\n  // We should enable debugging dynamic accesses when the static shell\n  // debugging has been enabled and we're also in development mode.\n  const isDebugDynamicAccesses =\n    isDebugStaticShell && routeModule.isDev === true\n\n  const isDebugFallbackShell = hasDebugFallbackShellQuery && isRoutePPREnabled\n\n  // If we're in minimal mode, then try to get the postponed information from\n  // the request metadata. If available, use it for resuming the postponed\n  // render.\n  const minimalPostponed = isRoutePPREnabled ? initialPostponed : undefined\n\n  // If PPR is enabled, and this is a RSC request (but not a prefetch), then\n  // we can use this fact to only generate the flight data for the request\n  // because we can't cache the HTML (as it's also dynamic).\n  const isDynamicRSCRequest =\n    isRoutePPREnabled && isRSCRequest && !isPrefetchRSCRequest\n\n  // Need to read this before it's stripped by stripFlightHeaders. We don't\n  // need to transfer it to the request meta because it's only read\n  // within this function; the static segment data should have already been\n  // generated, so we will always either return a static response or a 404.\n  const segmentPrefetchHeader = getRequestMeta(req, 'segmentPrefetchRSCRequest')\n\n  // TODO: investigate existing bug with shouldServeStreamingMetadata always\n  // being true for a revalidate due to modifying the base-server this.renderOpts\n  // when fixing this to correct logic it causes hydration issue since we set\n  // serveStreamingMetadata to true during export\n  let serveStreamingMetadata = !userAgent\n    ? true\n    : shouldServeStreamingMetadata(userAgent, nextConfig.htmlLimitedBots)\n\n  if (isHtmlBot && isRoutePPREnabled) {\n    isSSG = false\n    serveStreamingMetadata = false\n  }\n\n  // In development, we always want to generate dynamic HTML.\n  let supportsDynamicResponse: boolean =\n    // If we're in development, we always support dynamic HTML, unless it's\n    // a data request, in which case we only produce static HTML.\n    routeModule.isDev === true ||\n    // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isSSG ||\n    // If this request has provided postponed data, it supports dynamic\n    // HTML.\n    typeof initialPostponed === 'string' ||\n    // If this is a dynamic RSC request, then this render supports dynamic\n    // HTML (it's dynamic).\n    isDynamicRSCRequest\n\n  // When html bots request PPR page, perform the full dynamic rendering.\n  const shouldWaitOnAllReady = isHtmlBot && isRoutePPREnabled\n\n  let ssgCacheKey: string | null = null\n  if (\n    !isDraftMode &&\n    isSSG &&\n    !supportsDynamicResponse &&\n    !isPossibleServerAction &&\n    !minimalPostponed &&\n    !isDynamicRSCRequest\n  ) {\n    ssgCacheKey = resolvedPathname\n  }\n\n  // the staticPathKey differs from ssgCacheKey since\n  // ssgCacheKey is null in dev since we're always in \"dynamic\"\n  // mode in dev to bypass the cache, but we still need to honor\n  // dynamicParams = false in dev mode\n  let staticPathKey = ssgCacheKey\n  if (!staticPathKey && routeModule.isDev) {\n    staticPathKey = resolvedPathname\n  }\n\n  // If this is a request for an app path that should be statically generated\n  // and we aren't in the edge runtime, strip the flight headers so it will\n  // generate the static response.\n  if (\n    !routeModule.isDev &&\n    !isDraftMode &&\n    isSSG &&\n    isRSCRequest &&\n    !isDynamicRSCRequest\n  ) {\n    stripFlightHeaders(req.headers)\n  }\n\n  const ComponentMod = {\n    ...entryBase,\n    tree,\n    pages,\n    GlobalError,\n    handler,\n    routeModule,\n    __next_app__,\n  }\n\n  // Before rendering (which initializes component tree modules), we have to\n  // set the reference manifests to our global store so Server Action's\n  // encryption util can access to them at the top level of the page module.\n  if (serverActionsManifest && clientReferenceManifest) {\n    setReferenceManifestsSingleton({\n      page: srcPage,\n      clientReferenceManifest,\n      serverActionsManifest,\n      serverModuleMap: createServerModuleMap({\n        serverActionsManifest,\n      }),\n    })\n  }\n\n  const method = req.method || 'GET'\n  const tracer = getTracer()\n  const activeSpan = tracer.getActiveScopeSpan()\n\n  try {\n    const varyHeader = routeModule.getVaryHeader(\n      resolvedPathname,\n      interceptionRoutePatterns\n    )\n    res.setHeader('Vary', varyHeader)\n    const invokeRouteModule = async (\n      span: Span | undefined,\n      context: AppPageRouteHandlerContext\n    ) => {\n      const nextReq = new NodeNextRequest(req)\n      const nextRes = new NodeNextResponse(res)\n\n      // TODO: adapt for putting the RDC inside the postponed data\n      // If we're in dev, and this isn't a prefetch or a server action,\n      // we should seed the resume data cache.\n      if (process.env.NODE_ENV === 'development') {\n        if (\n          nextConfig.experimental.cacheComponents &&\n          !isPrefetchRSCRequest &&\n          !context.renderOpts.isPossibleServerAction\n        ) {\n          const warmup = await routeModule.warmup(nextReq, nextRes, context)\n\n          // If the warmup is successful, we should use the resume data\n          // cache from the warmup.\n          if (warmup.metadata.renderResumeDataCache) {\n            context.renderOpts.renderResumeDataCache =\n              warmup.metadata.renderResumeDataCache\n          }\n        }\n      }\n\n      return routeModule.render(nextReq, nextRes, context).finally(() => {\n        if (!span) return\n\n        span.setAttributes({\n          'http.status_code': res.statusCode,\n          'next.rsc': false,\n        })\n\n        const rootSpanAttributes = tracer.getRootSpanAttributes()\n        // We were unable to get attributes, probably OTEL is not enabled\n        if (!rootSpanAttributes) {\n          return\n        }\n\n        if (\n          rootSpanAttributes.get('next.span_type') !==\n          BaseServerSpan.handleRequest\n        ) {\n          console.warn(\n            `Unexpected root span type '${rootSpanAttributes.get(\n              'next.span_type'\n            )}'. Please report this Next.js issue https://github.com/vercel/next.js`\n          )\n          return\n        }\n\n        const route = rootSpanAttributes.get('next.route')\n        if (route) {\n          const name = `${method} ${route}`\n\n          span.setAttributes({\n            'next.route': route,\n            'http.route': route,\n            'next.span_name': name,\n          })\n          span.updateName(name)\n        } else {\n          span.updateName(`${method} ${req.url}`)\n        }\n      })\n    }\n\n    const doRender = async ({\n      span,\n      postponed,\n      fallbackRouteParams,\n    }: {\n      span?: Span\n      /**\n       * The postponed data for this render. This is only provided when resuming\n       * a render that has been postponed.\n       */\n      postponed: string | undefined\n\n      /**\n       * The unknown route params for this render.\n       */\n      fallbackRouteParams: FallbackRouteParams | null\n    }): Promise<ResponseCacheEntry> => {\n      const context: AppPageRouteHandlerContext = {\n        query,\n        params,\n        page: normalizedSrcPage,\n        sharedContext: {\n          buildId,\n        },\n        serverComponentsHmrCache: getRequestMeta(\n          req,\n          'serverComponentsHmrCache'\n        ),\n        fallbackRouteParams,\n        renderOpts: {\n          App: () => null,\n          Document: () => null,\n          pageConfig: {},\n          ComponentMod,\n          Component: interopDefault(ComponentMod),\n\n          params,\n          routeModule,\n          page: srcPage,\n          postponed,\n          shouldWaitOnAllReady,\n          serveStreamingMetadata,\n          supportsDynamicResponse:\n            typeof postponed === 'string' || supportsDynamicResponse,\n          buildManifest,\n          nextFontManifest,\n          reactLoadableManifest,\n          subresourceIntegrityManifest,\n          serverActionsManifest,\n          clientReferenceManifest,\n          setIsrStatus: routerServerContext?.setIsrStatus,\n\n          dir:\n            process.env.NEXT_RUNTIME === 'nodejs'\n              ? (require('path') as typeof import('path')).join(\n                  /* turbopackIgnore: true */\n                  process.cwd(),\n                  routeModule.relativeProjectDir\n                )\n              : `${process.cwd()}/${routeModule.relativeProjectDir}`,\n          isDraftMode,\n          isRevalidate: isSSG && !postponed && !isDynamicRSCRequest,\n          botType,\n          isOnDemandRevalidate,\n          isPossibleServerAction,\n          assetPrefix: nextConfig.assetPrefix,\n          nextConfigOutput: nextConfig.output,\n          crossOrigin: nextConfig.crossOrigin,\n          trailingSlash: nextConfig.trailingSlash,\n          previewProps: prerenderManifest.preview,\n          deploymentId: nextConfig.deploymentId,\n          enableTainting: nextConfig.experimental.taint,\n          htmlLimitedBots: nextConfig.htmlLimitedBots,\n          devtoolSegmentExplorer:\n            nextConfig.experimental.devtoolSegmentExplorer,\n          reactMaxHeadersLength: nextConfig.reactMaxHeadersLength,\n\n          multiZoneDraftMode,\n          incrementalCache: getRequestMeta(req, 'incrementalCache'),\n          cacheLifeProfiles: nextConfig.experimental.cacheLife,\n          basePath: nextConfig.basePath,\n          serverActions: nextConfig.experimental.serverActions,\n\n          ...(isDebugStaticShell || isDebugDynamicAccesses\n            ? {\n                nextExport: true,\n                supportsDynamicResponse: false,\n                isStaticGeneration: true,\n                isRevalidate: true,\n                isDebugDynamicAccesses: isDebugDynamicAccesses,\n              }\n            : {}),\n\n          experimental: {\n            isRoutePPREnabled,\n            expireTime: nextConfig.expireTime,\n            staleTimes: nextConfig.experimental.staleTimes,\n            cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n            clientSegmentCache: Boolean(\n              nextConfig.experimental.clientSegmentCache\n            ),\n            clientParamParsing: Boolean(\n              nextConfig.experimental.clientParamParsing\n            ),\n            dynamicOnHover: Boolean(nextConfig.experimental.dynamicOnHover),\n            inlineCss: Boolean(nextConfig.experimental.inlineCss),\n            authInterrupts: Boolean(nextConfig.experimental.authInterrupts),\n            clientTraceMetadata:\n              nextConfig.experimental.clientTraceMetadata || ([] as any),\n          },\n\n          waitUntil: ctx.waitUntil,\n          onClose: (cb) => {\n            res.on('close', cb)\n          },\n          onAfterTaskError: () => {},\n\n          onInstrumentationRequestError: (error, _request, errorContext) =>\n            routeModule.onRequestError(\n              req,\n              error,\n              errorContext,\n              routerServerContext\n            ),\n          err: getRequestMeta(req, 'invokeError'),\n          dev: routeModule.isDev,\n        },\n      }\n\n      const result = await invokeRouteModule(span, context)\n\n      const { metadata } = result\n\n      const {\n        cacheControl,\n        headers = {},\n        // Add any fetch tags that were on the page to the response headers.\n        fetchTags: cacheTags,\n      } = metadata\n\n      if (cacheTags) {\n        headers[NEXT_CACHE_TAGS_HEADER] = cacheTags\n      }\n\n      // Pull any fetch metrics from the render onto the request.\n      ;(req as any).fetchMetrics = metadata.fetchMetrics\n\n      // we don't throw static to dynamic errors in dev as isSSG\n      // is a best guess in dev since we don't have the prerender pass\n      // to know whether the path is actually static or not\n      if (\n        isSSG &&\n        cacheControl?.revalidate === 0 &&\n        !routeModule.isDev &&\n        !isRoutePPREnabled\n      ) {\n        const staticBailoutInfo = metadata.staticBailoutInfo\n\n        const err = new Error(\n          `Page changed from static to dynamic at runtime ${resolvedPathname}${\n            staticBailoutInfo?.description\n              ? `, reason: ${staticBailoutInfo.description}`\n              : ``\n          }` +\n            `\\nsee more here https://nextjs.org/docs/messages/app-static-to-dynamic-error`\n        )\n\n        if (staticBailoutInfo?.stack) {\n          const stack = staticBailoutInfo.stack\n          err.stack = err.message + stack.substring(stack.indexOf('\\n'))\n        }\n\n        throw err\n      }\n\n      return {\n        value: {\n          kind: CachedRouteKind.APP_PAGE,\n          html: result,\n          headers,\n          rscData: metadata.flightData,\n          postponed: metadata.postponed,\n          status: metadata.statusCode,\n          segmentData: metadata.segmentData,\n        } satisfies CachedAppPageValue,\n        cacheControl,\n      } satisfies ResponseCacheEntry\n    }\n\n    const responseGenerator: ResponseGenerator = async ({\n      hasResolved,\n      previousCacheEntry,\n      isRevalidating,\n      span,\n    }) => {\n      const isProduction = routeModule.isDev === false\n      const didRespond = hasResolved || res.writableEnded\n\n      // skip on-demand revalidate if cache is not present and\n      // revalidate-if-generated is set\n      if (\n        isOnDemandRevalidate &&\n        revalidateOnlyGenerated &&\n        !previousCacheEntry &&\n        !minimalMode\n      ) {\n        if (routerServerContext?.render404) {\n          await routerServerContext.render404(req, res)\n        } else {\n          res.statusCode = 404\n          res.end('This page could not be found')\n        }\n        return null\n      }\n\n      let fallbackMode: FallbackMode | undefined\n\n      if (prerenderInfo) {\n        fallbackMode = parseFallbackField(prerenderInfo.fallback)\n      }\n\n      // When serving a HTML bot request, we want to serve a blocking render and\n      // not the prerendered page. This ensures that the correct content is served\n      // to the bot in the head.\n      if (fallbackMode === FallbackMode.PRERENDER && isBot(userAgent)) {\n        if (!isRoutePPREnabled || isHtmlBot) {\n          fallbackMode = FallbackMode.BLOCKING_STATIC_RENDER\n        }\n      }\n\n      if (previousCacheEntry?.isStale === -1) {\n        isOnDemandRevalidate = true\n      }\n\n      // TODO: adapt for PPR\n      // only allow on-demand revalidate for fallback: true/blocking\n      // or for prerendered fallback: false paths\n      if (\n        isOnDemandRevalidate &&\n        (fallbackMode !== FallbackMode.NOT_FOUND || previousCacheEntry)\n      ) {\n        fallbackMode = FallbackMode.BLOCKING_STATIC_RENDER\n      }\n\n      if (\n        !minimalMode &&\n        fallbackMode !== FallbackMode.BLOCKING_STATIC_RENDER &&\n        staticPathKey &&\n        !didRespond &&\n        !isDraftMode &&\n        pageIsDynamic &&\n        (isProduction || !isPrerendered)\n      ) {\n        // if the page has dynamicParams: false and this pathname wasn't\n        // prerendered trigger the no fallback handling\n        if (\n          // In development, fall through to render to handle missing\n          // getStaticPaths.\n          (isProduction || prerenderInfo) &&\n          // When fallback isn't present, abort this render so we 404\n          fallbackMode === FallbackMode.NOT_FOUND\n        ) {\n          throw new NoFallbackError()\n        }\n\n        let fallbackResponse: ResponseCacheEntry | null | undefined\n\n        if (isRoutePPREnabled && !isRSCRequest) {\n          const cacheKey =\n            typeof prerenderInfo?.fallback === 'string'\n              ? prerenderInfo.fallback\n              : isProduction\n                ? normalizedSrcPage\n                : null\n\n          // We use the response cache here to handle the revalidation and\n          // management of the fallback shell.\n          fallbackResponse = await routeModule.handleResponse({\n            cacheKey,\n            req,\n            nextConfig,\n            routeKind: RouteKind.APP_PAGE,\n            isFallback: true,\n            prerenderManifest,\n            isRoutePPREnabled,\n            responseGenerator: async () =>\n              doRender({\n                span,\n                // We pass `undefined` as rendering a fallback isn't resumed\n                // here.\n                postponed: undefined,\n                fallbackRouteParams:\n                  // If we're in production or we're debugging the fallback\n                  // shell then we should postpone when dynamic params are\n                  // accessed.\n                  isProduction || isDebugFallbackShell\n                    ? getFallbackRouteParams(normalizedSrcPage)\n                    : null,\n              }),\n            waitUntil: ctx.waitUntil,\n          })\n\n          // If the fallback response was set to null, then we should return null.\n          if (fallbackResponse === null) return null\n\n          // Otherwise, if we did get a fallback response, we should return it.\n          if (fallbackResponse) {\n            // Remove the cache control from the response to prevent it from being\n            // used in the surrounding cache.\n            delete fallbackResponse.cacheControl\n\n            return fallbackResponse\n          }\n        }\n      }\n      // Only requests that aren't revalidating can be resumed. If we have the\n      // minimal postponed data, then we should resume the render with it.\n      const postponed =\n        !isOnDemandRevalidate && !isRevalidating && minimalPostponed\n          ? minimalPostponed\n          : undefined\n\n      // When we're in minimal mode, if we're trying to debug the static shell,\n      // we should just return nothing instead of resuming the dynamic render.\n      if (\n        (isDebugStaticShell || isDebugDynamicAccesses) &&\n        typeof postponed !== 'undefined'\n      ) {\n        return {\n          cacheControl: { revalidate: 1, expire: undefined },\n          value: {\n            kind: CachedRouteKind.PAGES,\n            html: RenderResult.EMPTY,\n            pageData: {},\n            headers: undefined,\n            status: undefined,\n          } satisfies CachedPageValue,\n        }\n      }\n\n      // If this is a dynamic route with PPR enabled and the default route\n      // matches were set, then we should pass the fallback route params to\n      // the renderer as this is a fallback revalidation request.\n      const fallbackRouteParams =\n        pageIsDynamic &&\n        isRoutePPREnabled &&\n        (getRequestMeta(req, 'renderFallbackShell') || isDebugFallbackShell)\n          ? getFallbackRouteParams(pathname)\n          : null\n\n      // Perform the render.\n      return doRender({\n        span,\n        postponed,\n        fallbackRouteParams,\n      })\n    }\n\n    const handleResponse = async (span?: Span): Promise<null | void> => {\n      const cacheEntry = await routeModule.handleResponse({\n        cacheKey: ssgCacheKey,\n        responseGenerator: (c) =>\n          responseGenerator({\n            span,\n            ...c,\n          }),\n        routeKind: RouteKind.APP_PAGE,\n        isOnDemandRevalidate,\n        isRoutePPREnabled,\n        req,\n        nextConfig,\n        prerenderManifest,\n        waitUntil: ctx.waitUntil,\n      })\n\n      if (isDraftMode) {\n        res.setHeader(\n          'Cache-Control',\n          'private, no-cache, no-store, max-age=0, must-revalidate'\n        )\n      }\n\n      // In dev, we should not cache pages for any reason.\n      if (routeModule.isDev) {\n        res.setHeader('Cache-Control', 'no-store, must-revalidate')\n      }\n\n      if (!cacheEntry) {\n        if (ssgCacheKey) {\n          // A cache entry might not be generated if a response is written\n          // in `getInitialProps` or `getServerSideProps`, but those shouldn't\n          // have a cache key. If we do have a cache key but we don't end up\n          // with a cache entry, then either Next.js or the application has a\n          // bug that needs fixing.\n          throw new Error('invariant: cache entry required but not generated')\n        }\n        return null\n      }\n\n      if (cacheEntry.value?.kind !== CachedRouteKind.APP_PAGE) {\n        throw new Error(\n          `Invariant app-page handler received invalid cache entry ${cacheEntry.value?.kind}`\n        )\n      }\n\n      const didPostpone = typeof cacheEntry.value.postponed === 'string'\n\n      if (\n        isSSG &&\n        // We don't want to send a cache header for requests that contain dynamic\n        // data. If this is a Dynamic RSC request or wasn't a Prefetch RSC\n        // request, then we should set the cache header.\n        !isDynamicRSCRequest &&\n        (!didPostpone || isPrefetchRSCRequest)\n      ) {\n        if (!minimalMode) {\n          // set x-nextjs-cache header to match the header\n          // we set for the image-optimizer\n          res.setHeader(\n            'x-nextjs-cache',\n            isOnDemandRevalidate\n              ? 'REVALIDATED'\n              : cacheEntry.isMiss\n                ? 'MISS'\n                : cacheEntry.isStale\n                  ? 'STALE'\n                  : 'HIT'\n          )\n        }\n        // Set a header used by the client router to signal the response is static\n        // and should respect the `static` cache staleTime value.\n        res.setHeader(NEXT_IS_PRERENDER_HEADER, '1')\n      }\n      const { value: cachedData } = cacheEntry\n\n      // Coerce the cache control parameter from the render.\n      let cacheControl: CacheControl | undefined\n\n      // If this is a resume request in minimal mode it is streamed with dynamic\n      // content and should not be cached.\n      if (minimalPostponed) {\n        cacheControl = { revalidate: 0, expire: undefined }\n      }\n\n      // If this is in minimal mode and this is a flight request that isn't a\n      // prefetch request while PPR is enabled, it cannot be cached as it contains\n      // dynamic content.\n      else if (\n        minimalMode &&\n        isRSCRequest &&\n        !isPrefetchRSCRequest &&\n        isRoutePPREnabled\n      ) {\n        cacheControl = { revalidate: 0, expire: undefined }\n      } else if (!routeModule.isDev) {\n        // If this is a preview mode request, we shouldn't cache it\n        if (isDraftMode) {\n          cacheControl = { revalidate: 0, expire: undefined }\n        }\n\n        // If this isn't SSG, then we should set change the header only if it is\n        // not set already.\n        else if (!isSSG) {\n          if (!res.getHeader('Cache-Control')) {\n            cacheControl = { revalidate: 0, expire: undefined }\n          }\n        } else if (cacheEntry.cacheControl) {\n          // If the cache entry has a cache control with a revalidate value that's\n          // a number, use it.\n          if (typeof cacheEntry.cacheControl.revalidate === 'number') {\n            if (cacheEntry.cacheControl.revalidate < 1) {\n              throw new Error(\n                `Invalid revalidate configuration provided: ${cacheEntry.cacheControl.revalidate} < 1`\n              )\n            }\n\n            cacheControl = {\n              revalidate: cacheEntry.cacheControl.revalidate,\n              expire: cacheEntry.cacheControl?.expire ?? nextConfig.expireTime,\n            }\n          }\n          // Otherwise if the revalidate value is false, then we should use the\n          // cache time of one year.\n          else {\n            cacheControl = { revalidate: CACHE_ONE_YEAR, expire: undefined }\n          }\n        }\n      }\n\n      cacheEntry.cacheControl = cacheControl\n\n      if (\n        typeof segmentPrefetchHeader === 'string' &&\n        cachedData?.kind === CachedRouteKind.APP_PAGE &&\n        cachedData.segmentData\n      ) {\n        // This is a prefetch request issued by the client Segment Cache. These\n        // should never reach the application layer (lambda). We should either\n        // respond from the cache (HIT) or respond with 204 No Content (MISS).\n\n        // Set a header to indicate that PPR is enabled for this route. This\n        // lets the client distinguish between a regular cache miss and a cache\n        // miss due to PPR being disabled. In other contexts this header is used\n        // to indicate that the response contains dynamic data, but here we're\n        // only using it to indicate that the feature is enabled — the segment\n        // response itself contains whether the data is dynamic.\n        res.setHeader(NEXT_DID_POSTPONE_HEADER, '2')\n\n        // Add the cache tags header to the response if it exists and we're in\n        // minimal mode while rendering a static page.\n        const tags = cachedData.headers?.[NEXT_CACHE_TAGS_HEADER]\n        if (minimalMode && isSSG && tags && typeof tags === 'string') {\n          res.setHeader(NEXT_CACHE_TAGS_HEADER, tags)\n        }\n\n        const matchedSegment = cachedData.segmentData.get(segmentPrefetchHeader)\n        if (matchedSegment !== undefined) {\n          // Cache hit\n          return sendRenderResult({\n            req,\n            res,\n            generateEtags: nextConfig.generateEtags,\n            poweredByHeader: nextConfig.poweredByHeader,\n            result: RenderResult.fromStatic(\n              matchedSegment,\n              RSC_CONTENT_TYPE_HEADER\n            ),\n            cacheControl: cacheEntry.cacheControl,\n          })\n        }\n\n        // Cache miss. Either a cache entry for this route has not been generated\n        // (which technically should not be possible when PPR is enabled, because\n        // at a minimum there should always be a fallback entry) or there's no\n        // match for the requested segment. Respond with a 204 No Content. We\n        // don't bother to respond with 404, because these requests are only\n        // issued as part of a prefetch.\n        res.statusCode = 204\n        return sendRenderResult({\n          req,\n          res,\n          generateEtags: nextConfig.generateEtags,\n          poweredByHeader: nextConfig.poweredByHeader,\n          result: RenderResult.EMPTY,\n          cacheControl: cacheEntry.cacheControl,\n        })\n      }\n\n      // If there's a callback for `onCacheEntry`, call it with the cache entry\n      // and the revalidate options.\n      const onCacheEntry = getRequestMeta(req, 'onCacheEntry')\n      if (onCacheEntry) {\n        const finished = await onCacheEntry(\n          {\n            ...cacheEntry,\n            // TODO: remove this when upstream doesn't\n            // always expect this value to be \"PAGE\"\n            value: {\n              ...cacheEntry.value,\n              kind: 'PAGE',\n            },\n          },\n          {\n            url: getRequestMeta(req, 'initURL'),\n          }\n        )\n        if (finished) {\n          // TODO: maybe we have to end the request?\n          return null\n        }\n      }\n\n      // If the request has a postponed state and it's a resume request we\n      // should error.\n      if (didPostpone && minimalPostponed) {\n        throw new Error(\n          'Invariant: postponed state should not be present on a resume request'\n        )\n      }\n\n      if (cachedData.headers) {\n        const headers = { ...cachedData.headers }\n\n        if (!minimalMode || !isSSG) {\n          delete headers[NEXT_CACHE_TAGS_HEADER]\n        }\n\n        for (let [key, value] of Object.entries(headers)) {\n          if (typeof value === 'undefined') continue\n\n          if (Array.isArray(value)) {\n            for (const v of value) {\n              res.appendHeader(key, v)\n            }\n          } else if (typeof value === 'number') {\n            value = value.toString()\n            res.appendHeader(key, value)\n          } else {\n            res.appendHeader(key, value)\n          }\n        }\n      }\n\n      // Add the cache tags header to the response if it exists and we're in\n      // minimal mode while rendering a static page.\n      const tags = cachedData.headers?.[NEXT_CACHE_TAGS_HEADER]\n      if (minimalMode && isSSG && tags && typeof tags === 'string') {\n        res.setHeader(NEXT_CACHE_TAGS_HEADER, tags)\n      }\n\n      // If the request is a data request, then we shouldn't set the status code\n      // from the response because it should always be 200. This should be gated\n      // behind the experimental PPR flag.\n      if (cachedData.status && (!isRSCRequest || !isRoutePPREnabled)) {\n        res.statusCode = cachedData.status\n      }\n\n      // Redirect information is encoded in RSC payload, so we don't need to use redirect status codes\n      if (\n        !minimalMode &&\n        cachedData.status &&\n        RedirectStatusCode[cachedData.status] &&\n        isRSCRequest\n      ) {\n        res.statusCode = 200\n      }\n\n      // Mark that the request did postpone.\n      if (didPostpone) {\n        res.setHeader(NEXT_DID_POSTPONE_HEADER, '1')\n      }\n\n      // we don't go through this block when preview mode is true\n      // as preview mode is a dynamic request (bypasses cache) and doesn't\n      // generate both HTML and payloads in the same request so continue to just\n      // return the generated payload\n      if (isRSCRequest && !isDraftMode) {\n        // If this is a dynamic RSC request, then stream the response.\n        if (typeof cachedData.rscData === 'undefined') {\n          if (cachedData.postponed) {\n            throw new Error('Invariant: Expected postponed to be undefined')\n          }\n\n          return sendRenderResult({\n            req,\n            res,\n            generateEtags: nextConfig.generateEtags,\n            poweredByHeader: nextConfig.poweredByHeader,\n            result: cachedData.html,\n            // Dynamic RSC responses cannot be cached, even if they're\n            // configured with `force-static` because we have no way of\n            // distinguishing between `force-static` and pages that have no\n            // postponed state.\n            // TODO: distinguish `force-static` from pages with no postponed state (static)\n            cacheControl: isDynamicRSCRequest\n              ? { revalidate: 0, expire: undefined }\n              : cacheEntry.cacheControl,\n          })\n        }\n\n        // As this isn't a prefetch request, we should serve the static flight\n        // data.\n        return sendRenderResult({\n          req,\n          res,\n          generateEtags: nextConfig.generateEtags,\n          poweredByHeader: nextConfig.poweredByHeader,\n          result: RenderResult.fromStatic(\n            cachedData.rscData,\n            RSC_CONTENT_TYPE_HEADER\n          ),\n          cacheControl: cacheEntry.cacheControl,\n        })\n      }\n\n      // This is a request for HTML data.\n      let body = cachedData.html\n\n      // If there's no postponed state, we should just serve the HTML. This\n      // should also be the case for a resume request because it's completed\n      // as a server render (rather than a static render).\n      if (!didPostpone || minimalMode || isRSCRequest) {\n        // If we're in test mode, we should add a sentinel chunk to the response\n        // that's between the static and dynamic parts so we can compare the\n        // chunks and add assertions.\n        if (\n          process.env.__NEXT_TEST_MODE &&\n          minimalMode &&\n          isRoutePPREnabled &&\n          body.contentType === HTML_CONTENT_TYPE_HEADER\n        ) {\n          // As we're in minimal mode, the static part would have already been\n          // streamed first. The only part that this streams is the dynamic part\n          // so we should FIRST stream the sentinel and THEN the dynamic part.\n          body.unshift(createPPRBoundarySentinel())\n        }\n\n        return sendRenderResult({\n          req,\n          res,\n          generateEtags: nextConfig.generateEtags,\n          poweredByHeader: nextConfig.poweredByHeader,\n          result: body,\n          cacheControl: cacheEntry.cacheControl,\n        })\n      }\n\n      // If we're debugging the static shell or the dynamic API accesses, we\n      // should just serve the HTML without resuming the render. The returned\n      // HTML will be the static shell so all the Dynamic API's will be used\n      // during static generation.\n      if (isDebugStaticShell || isDebugDynamicAccesses) {\n        // Since we're not resuming the render, we need to at least add the\n        // closing body and html tags to create valid HTML.\n        body.push(\n          new ReadableStream({\n            start(controller) {\n              controller.enqueue(ENCODED_TAGS.CLOSED.BODY_AND_HTML)\n              controller.close()\n            },\n          })\n        )\n\n        return sendRenderResult({\n          req,\n          res,\n          generateEtags: nextConfig.generateEtags,\n          poweredByHeader: nextConfig.poweredByHeader,\n          result: body,\n          cacheControl: { revalidate: 0, expire: undefined },\n        })\n      }\n\n      // If we're in test mode, we should add a sentinel chunk to the response\n      // that's between the static and dynamic parts so we can compare the\n      // chunks and add assertions.\n      if (process.env.__NEXT_TEST_MODE) {\n        body.push(createPPRBoundarySentinel())\n      }\n\n      // This request has postponed, so let's create a new transformer that the\n      // dynamic data can pipe to that will attach the dynamic data to the end\n      // of the response.\n      const transformer = new TransformStream<Uint8Array, Uint8Array>()\n      body.push(transformer.readable)\n\n      // Perform the render again, but this time, provide the postponed state.\n      // We don't await because we want the result to start streaming now, and\n      // we've already chained the transformer's readable to the render result.\n      doRender({\n        span,\n        postponed: cachedData.postponed,\n        // This is a resume render, not a fallback render, so we don't need to\n        // set this.\n        fallbackRouteParams: null,\n      })\n        .then(async (result) => {\n          if (!result) {\n            throw new Error('Invariant: expected a result to be returned')\n          }\n\n          if (result.value?.kind !== CachedRouteKind.APP_PAGE) {\n            throw new Error(\n              `Invariant: expected a page response, got ${result.value?.kind}`\n            )\n          }\n\n          // Pipe the resume result to the transformer.\n          await result.value.html.pipeTo(transformer.writable)\n        })\n        .catch((err) => {\n          // An error occurred during piping or preparing the render, abort\n          // the transformers writer so we can terminate the stream.\n          transformer.writable.abort(err).catch((e) => {\n            console.error(\"couldn't abort transformer\", e)\n          })\n        })\n\n      return sendRenderResult({\n        req,\n        res,\n        generateEtags: nextConfig.generateEtags,\n        poweredByHeader: nextConfig.poweredByHeader,\n        result: body,\n        // We don't want to cache the response if it has postponed data because\n        // the response being sent to the client it's dynamic parts are streamed\n        // to the client on the same request.\n        cacheControl: { revalidate: 0, expire: undefined },\n      })\n    }\n\n    // TODO: activeSpan code path is for when wrapped by\n    // next-server can be removed when this is no longer used\n    if (activeSpan) {\n      await handleResponse(activeSpan)\n    } else {\n      return await tracer.withPropagatedContext(req.headers, () =>\n        tracer.trace(\n          BaseServerSpan.handleRequest,\n          {\n            spanName: `${method} ${req.url}`,\n            kind: SpanKind.SERVER,\n            attributes: {\n              'http.method': method,\n              'http.target': req.url,\n            },\n          },\n          handleResponse\n        )\n      )\n    }\n  } catch (err) {\n    if (!(err instanceof NoFallbackError)) {\n      await routeModule.onRequestError(\n        req,\n        err,\n        {\n          routerKind: 'App Router',\n          routePath: srcPage,\n          routeType: 'render',\n          revalidateReason: getRevalidateReason({\n            isRevalidate: isSSG,\n            isOnDemandRevalidate,\n          }),\n        },\n        routerServerContext\n      )\n    }\n\n    // rethrow so that we can handle serving error page\n    throw err\n  }\n}\n\n// TODO: omit this from production builds, only test builds should include it\n/**\n * Creates a readable stream that emits a PPR boundary sentinel.\n *\n * @returns A readable stream that emits a PPR boundary sentinel.\n */\nfunction createPPRBoundarySentinel() {\n  return new ReadableStream({\n    start(controller) {\n      controller.enqueue(\n        new TextEncoder().encode('<!-- PPR_BOUNDARY_SENTINEL -->')\n      )\n      controller.close()\n    },\n  })\n}\n"],"names":["AppPageRouteModule","RouteKind","getRevalidateReason","getTracer","SpanKind","getRequestMeta","BaseServerSpan","interopDefault","stripFlightHeaders","NodeNextRequest","NodeNextResponse","checkIsAppPPREnabled","getFallbackRouteParams","setReferenceManifestsSingleton","isHtmlBotRequest","shouldServeStreamingMetadata","createServerModuleMap","normalizeAppPath","getIsPossibleServerAction","RSC_HEADER","NEXT_ROUTER_PREFETCH_HEADER","NEXT_IS_PRERENDER_HEADER","NEXT_DID_POSTPONE_HEADER","RSC_CONTENT_TYPE_HEADER","getBotType","isBot","CachedRouteKind","FallbackMode","parseFallbackField","RenderResult","CACHE_ONE_YEAR","HTML_CONTENT_TYPE_HEADER","NEXT_CACHE_TAGS_HEADER","ENCODED_TAGS","sendRenderResult","NoFallbackError","tree","pages","GlobalError","__next_app__","require","__next_app_require__","loadChunk","__next_app_load_chunk__","entryBase","RedirectStatusCode","routeModule","definition","kind","APP_PAGE","page","pathname","bundlePath","filename","appPaths","userland","loaderTree","distDir","process","env","__NEXT_RELATIVE_DIST_DIR","relativeProjectDir","__NEXT_RELATIVE_PROJECT_DIR","handler","req","res","ctx","prerenderManifest","srcPage","TURBOPACK","replace","multiZoneDraftMode","__NEXT_MULTI_ZONE_DRAFT_MODE","initialPostponed","minimalMode","prepareResult","prepare","statusCode","end","waitUntil","Promise","resolve","buildId","query","params","parsedUrl","pageIsDynamic","buildManifest","nextFontManifest","reactLoadableManifest","serverActionsManifest","clientReferenceManifest","subresourceIntegrityManifest","isDraftMode","resolvedPathname","revalidateOnlyGenerated","routerServerContext","nextConfig","interceptionRoutePatterns","normalizedSrcPage","isOnDemandRevalidate","prerenderInfo","match","isPrerendered","routes","isSSG","Boolean","userAgent","headers","botType","isHtmlBot","isPrefetchRSCRequest","isRSCRequest","isPossibleServerAction","couldSupportPPR","experimental","ppr","hasDebugStaticShellQuery","__NEXT_EXPERIMENTAL_STATIC_SHELL_DEBUGGING","__nextppronly","hasDebugFallbackShellQuery","isRoutePPREnabled","dynamicRoutes","renderingMode","isDev","experimentalTestProxy","isDebugStaticShell","isDebugDynamicAccesses","isDebugFallbackShell","minimalPostponed","undefined","isDynamicRSCRequest","segmentPrefetchHeader","serveStreamingMetadata","htmlLimitedBots","supportsDynamicResponse","shouldWaitOnAllReady","ssgCacheKey","staticPathKey","ComponentMod","serverModuleMap","method","tracer","activeSpan","getActiveScopeSpan","varyHeader","getVaryHeader","setHeader","invokeRouteModule","span","context","nextReq","nextRes","NODE_ENV","cacheComponents","renderOpts","warmup","metadata","renderResumeDataCache","render","finally","setAttributes","rootSpanAttributes","getRootSpanAttributes","get","handleRequest","console","warn","route","name","updateName","url","doRender","postponed","fallbackRouteParams","sharedContext","serverComponentsHmrCache","App","Document","pageConfig","Component","setIsrStatus","dir","NEXT_RUNTIME","join","cwd","isRevalidate","assetPrefix","nextConfigOutput","output","crossOrigin","trailingSlash","previewProps","preview","deploymentId","enableTainting","taint","devtoolSegmentExplorer","reactMaxHeadersLength","incrementalCache","cacheLifeProfiles","cacheLife","basePath","serverActions","nextExport","isStaticGeneration","expireTime","staleTimes","clientSegmentCache","clientParamParsing","dynamicOnHover","inlineCss","authInterrupts","clientTraceMetadata","onClose","cb","on","onAfterTaskError","onInstrumentationRequestError","error","_request","errorContext","onRequestError","err","dev","result","cacheControl","fetchTags","cacheTags","fetchMetrics","revalidate","staticBailoutInfo","Error","description","stack","message","substring","indexOf","value","html","rscData","flightData","status","segmentData","responseGenerator","hasResolved","previousCacheEntry","isRevalidating","isProduction","didRespond","writableEnded","render404","fallbackMode","fallback","PRERENDER","BLOCKING_STATIC_RENDER","isStale","NOT_FOUND","fallbackResponse","cacheKey","handleResponse","routeKind","isFallback","expire","PAGES","EMPTY","pageData","cacheEntry","cachedData","c","didPostpone","isMiss","getHeader","tags","matchedSegment","generateEtags","poweredByHeader","fromStatic","onCacheEntry","finished","key","Object","entries","Array","isArray","v","appendHeader","toString","body","__NEXT_TEST_MODE","contentType","unshift","createPPRBoundarySentinel","push","ReadableStream","start","controller","enqueue","CLOSED","BODY_AND_HTML","close","transformer","TransformStream","readable","then","pipeTo","writable","catch","abort","e","withPropagatedContext","trace","spanName","SERVER","attributes","routerKind","routePath","routeType","revalidateReason","TextEncoder","encode"],"mappings":"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","ignoreList":[0]}