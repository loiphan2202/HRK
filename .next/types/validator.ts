// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../src/app/[id]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[id]">> = Specific
  const handler = {} as typeof import("../../src/app/[id]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/admin/categories/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/categories">> = Specific
  const handler = {} as typeof import("../../src/app/admin/categories/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/admin/orders/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/orders">> = Specific
  const handler = {} as typeof import("../../src/app/admin/orders/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/admin/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin">> = Specific
  const handler = {} as typeof import("../../src/app/admin/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/admin/products/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/products">> = Specific
  const handler = {} as typeof import("../../src/app/admin/products/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/admin/tables/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/tables">> = Specific
  const handler = {} as typeof import("../../src/app/admin/tables/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/cart/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/cart">> = Specific
  const handler = {} as typeof import("../../src/app/cart/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/check-in/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/check-in">> = Specific
  const handler = {} as typeof import("../../src/app/check-in/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/login/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/login">> = Specific
  const handler = {} as typeof import("../../src/app/login/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/orders/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/orders">> = Specific
  const handler = {} as typeof import("../../src/app/orders/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/register/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/register">> = Specific
  const handler = {} as typeof import("../../src/app/register/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/settings/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/settings">> = Specific
  const handler = {} as typeof import("../../src/app/settings/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/shop/[id]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/shop/[id]">> = Specific
  const handler = {} as typeof import("../../src/app/shop/[id]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/shop/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/shop">> = Specific
  const handler = {} as typeof import("../../src/app/shop/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/categories/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/categories/[id]">> = Specific
  const handler = {} as typeof import("../../src/app/api/categories/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/categories/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/categories">> = Specific
  const handler = {} as typeof import("../../src/app/api/categories/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/init-admin/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/init-admin">> = Specific
  const handler = {} as typeof import("../../src/app/api/init-admin/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/orders/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/orders/[id]">> = Specific
  const handler = {} as typeof import("../../src/app/api/orders/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/orders/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/orders">> = Specific
  const handler = {} as typeof import("../../src/app/api/orders/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/orders/user/[userId]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/orders/user/[userId]">> = Specific
  const handler = {} as typeof import("../../src/app/api/orders/user/[userId]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/products/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/products/[id]">> = Specific
  const handler = {} as typeof import("../../src/app/api/products/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/products/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/products">> = Specific
  const handler = {} as typeof import("../../src/app/api/products/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/tables/[id]/qr/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/tables/[id]/qr">> = Specific
  const handler = {} as typeof import("../../src/app/api/tables/[id]/qr/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/tables/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/tables/[id]">> = Specific
  const handler = {} as typeof import("../../src/app/api/tables/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/tables/check-in/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/tables/check-in">> = Specific
  const handler = {} as typeof import("../../src/app/api/tables/check-in/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/tables/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/tables">> = Specific
  const handler = {} as typeof import("../../src/app/api/tables/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/users/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/users/[id]">> = Specific
  const handler = {} as typeof import("../../src/app/api/users/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/users/login/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/users/login">> = Specific
  const handler = {} as typeof import("../../src/app/api/users/login/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/users/register/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/users/register">> = Specific
  const handler = {} as typeof import("../../src/app/api/users/register/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../src/app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
