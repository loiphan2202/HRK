
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `OrderProduct` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model OrderProduct
 * 
 */
export type OrderProductModel = runtime.Types.Result.DefaultSelection<Prisma.$OrderProductPayload>

export type AggregateOrderProduct = {
  _count: OrderProductCountAggregateOutputType | null
  _avg: OrderProductAvgAggregateOutputType | null
  _sum: OrderProductSumAggregateOutputType | null
  _min: OrderProductMinAggregateOutputType | null
  _max: OrderProductMaxAggregateOutputType | null
}

export type OrderProductAvgAggregateOutputType = {
  quantity: number | null
}

export type OrderProductSumAggregateOutputType = {
  quantity: number | null
}

export type OrderProductMinAggregateOutputType = {
  id: string | null
  orderId: string | null
  productId: string | null
  quantity: number | null
}

export type OrderProductMaxAggregateOutputType = {
  id: string | null
  orderId: string | null
  productId: string | null
  quantity: number | null
}

export type OrderProductCountAggregateOutputType = {
  id: number
  orderId: number
  productId: number
  quantity: number
  _all: number
}


export type OrderProductAvgAggregateInputType = {
  quantity?: true
}

export type OrderProductSumAggregateInputType = {
  quantity?: true
}

export type OrderProductMinAggregateInputType = {
  id?: true
  orderId?: true
  productId?: true
  quantity?: true
}

export type OrderProductMaxAggregateInputType = {
  id?: true
  orderId?: true
  productId?: true
  quantity?: true
}

export type OrderProductCountAggregateInputType = {
  id?: true
  orderId?: true
  productId?: true
  quantity?: true
  _all?: true
}

export type OrderProductAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which OrderProduct to aggregate.
   */
  where?: Prisma.OrderProductWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrderProducts to fetch.
   */
  orderBy?: Prisma.OrderProductOrderByWithRelationInput | Prisma.OrderProductOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.OrderProductWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrderProducts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrderProducts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned OrderProducts
  **/
  _count?: true | OrderProductCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: OrderProductAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: OrderProductSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: OrderProductMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: OrderProductMaxAggregateInputType
}

export type GetOrderProductAggregateType<T extends OrderProductAggregateArgs> = {
      [P in keyof T & keyof AggregateOrderProduct]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateOrderProduct[P]>
    : Prisma.GetScalarType<T[P], AggregateOrderProduct[P]>
}




export type OrderProductGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OrderProductWhereInput
  orderBy?: Prisma.OrderProductOrderByWithAggregationInput | Prisma.OrderProductOrderByWithAggregationInput[]
  by: Prisma.OrderProductScalarFieldEnum[] | Prisma.OrderProductScalarFieldEnum
  having?: Prisma.OrderProductScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: OrderProductCountAggregateInputType | true
  _avg?: OrderProductAvgAggregateInputType
  _sum?: OrderProductSumAggregateInputType
  _min?: OrderProductMinAggregateInputType
  _max?: OrderProductMaxAggregateInputType
}

export type OrderProductGroupByOutputType = {
  id: string
  orderId: string
  productId: string
  quantity: number
  _count: OrderProductCountAggregateOutputType | null
  _avg: OrderProductAvgAggregateOutputType | null
  _sum: OrderProductSumAggregateOutputType | null
  _min: OrderProductMinAggregateOutputType | null
  _max: OrderProductMaxAggregateOutputType | null
}

type GetOrderProductGroupByPayload<T extends OrderProductGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<OrderProductGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof OrderProductGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], OrderProductGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], OrderProductGroupByOutputType[P]>
      }
    >
  >



export type OrderProductWhereInput = {
  AND?: Prisma.OrderProductWhereInput | Prisma.OrderProductWhereInput[]
  OR?: Prisma.OrderProductWhereInput[]
  NOT?: Prisma.OrderProductWhereInput | Prisma.OrderProductWhereInput[]
  id?: Prisma.StringFilter<"OrderProduct"> | string
  orderId?: Prisma.StringFilter<"OrderProduct"> | string
  productId?: Prisma.StringFilter<"OrderProduct"> | string
  quantity?: Prisma.IntFilter<"OrderProduct"> | number
  order?: Prisma.XOR<Prisma.OrderScalarRelationFilter, Prisma.OrderWhereInput>
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}

export type OrderProductOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  order?: Prisma.OrderOrderByWithRelationInput
  product?: Prisma.ProductOrderByWithRelationInput
}

export type OrderProductWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.OrderProductWhereInput | Prisma.OrderProductWhereInput[]
  OR?: Prisma.OrderProductWhereInput[]
  NOT?: Prisma.OrderProductWhereInput | Prisma.OrderProductWhereInput[]
  orderId?: Prisma.StringFilter<"OrderProduct"> | string
  productId?: Prisma.StringFilter<"OrderProduct"> | string
  quantity?: Prisma.IntFilter<"OrderProduct"> | number
  order?: Prisma.XOR<Prisma.OrderScalarRelationFilter, Prisma.OrderWhereInput>
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}, "id">

export type OrderProductOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  _count?: Prisma.OrderProductCountOrderByAggregateInput
  _avg?: Prisma.OrderProductAvgOrderByAggregateInput
  _max?: Prisma.OrderProductMaxOrderByAggregateInput
  _min?: Prisma.OrderProductMinOrderByAggregateInput
  _sum?: Prisma.OrderProductSumOrderByAggregateInput
}

export type OrderProductScalarWhereWithAggregatesInput = {
  AND?: Prisma.OrderProductScalarWhereWithAggregatesInput | Prisma.OrderProductScalarWhereWithAggregatesInput[]
  OR?: Prisma.OrderProductScalarWhereWithAggregatesInput[]
  NOT?: Prisma.OrderProductScalarWhereWithAggregatesInput | Prisma.OrderProductScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"OrderProduct"> | string
  orderId?: Prisma.StringWithAggregatesFilter<"OrderProduct"> | string
  productId?: Prisma.StringWithAggregatesFilter<"OrderProduct"> | string
  quantity?: Prisma.IntWithAggregatesFilter<"OrderProduct"> | number
}

export type OrderProductCreateInput = {
  id?: string
  quantity: number
  order: Prisma.OrderCreateNestedOneWithoutProductsInput
  product: Prisma.ProductCreateNestedOneWithoutOrderProductsInput
}

export type OrderProductUncheckedCreateInput = {
  id?: string
  orderId: string
  productId: string
  quantity: number
}

export type OrderProductUpdateInput = {
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  order?: Prisma.OrderUpdateOneRequiredWithoutProductsNestedInput
  product?: Prisma.ProductUpdateOneRequiredWithoutOrderProductsNestedInput
}

export type OrderProductUncheckedUpdateInput = {
  orderId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
}

export type OrderProductCreateManyInput = {
  id?: string
  orderId: string
  productId: string
  quantity: number
}

export type OrderProductUpdateManyMutationInput = {
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
}

export type OrderProductUncheckedUpdateManyInput = {
  orderId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
}

export type OrderProductListRelationFilter = {
  every?: Prisma.OrderProductWhereInput
  some?: Prisma.OrderProductWhereInput
  none?: Prisma.OrderProductWhereInput
}

export type OrderProductOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type OrderProductCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
}

export type OrderProductAvgOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
}

export type OrderProductMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
}

export type OrderProductMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
}

export type OrderProductSumOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
}

export type OrderProductCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.OrderProductCreateWithoutProductInput, Prisma.OrderProductUncheckedCreateWithoutProductInput> | Prisma.OrderProductCreateWithoutProductInput[] | Prisma.OrderProductUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.OrderProductCreateOrConnectWithoutProductInput | Prisma.OrderProductCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.OrderProductCreateManyProductInputEnvelope
  connect?: Prisma.OrderProductWhereUniqueInput | Prisma.OrderProductWhereUniqueInput[]
}

export type OrderProductUncheckedCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.OrderProductCreateWithoutProductInput, Prisma.OrderProductUncheckedCreateWithoutProductInput> | Prisma.OrderProductCreateWithoutProductInput[] | Prisma.OrderProductUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.OrderProductCreateOrConnectWithoutProductInput | Prisma.OrderProductCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.OrderProductCreateManyProductInputEnvelope
  connect?: Prisma.OrderProductWhereUniqueInput | Prisma.OrderProductWhereUniqueInput[]
}

export type OrderProductUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.OrderProductCreateWithoutProductInput, Prisma.OrderProductUncheckedCreateWithoutProductInput> | Prisma.OrderProductCreateWithoutProductInput[] | Prisma.OrderProductUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.OrderProductCreateOrConnectWithoutProductInput | Prisma.OrderProductCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.OrderProductUpsertWithWhereUniqueWithoutProductInput | Prisma.OrderProductUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.OrderProductCreateManyProductInputEnvelope
  set?: Prisma.OrderProductWhereUniqueInput | Prisma.OrderProductWhereUniqueInput[]
  disconnect?: Prisma.OrderProductWhereUniqueInput | Prisma.OrderProductWhereUniqueInput[]
  delete?: Prisma.OrderProductWhereUniqueInput | Prisma.OrderProductWhereUniqueInput[]
  connect?: Prisma.OrderProductWhereUniqueInput | Prisma.OrderProductWhereUniqueInput[]
  update?: Prisma.OrderProductUpdateWithWhereUniqueWithoutProductInput | Prisma.OrderProductUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.OrderProductUpdateManyWithWhereWithoutProductInput | Prisma.OrderProductUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.OrderProductScalarWhereInput | Prisma.OrderProductScalarWhereInput[]
}

export type OrderProductUncheckedUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.OrderProductCreateWithoutProductInput, Prisma.OrderProductUncheckedCreateWithoutProductInput> | Prisma.OrderProductCreateWithoutProductInput[] | Prisma.OrderProductUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.OrderProductCreateOrConnectWithoutProductInput | Prisma.OrderProductCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.OrderProductUpsertWithWhereUniqueWithoutProductInput | Prisma.OrderProductUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.OrderProductCreateManyProductInputEnvelope
  set?: Prisma.OrderProductWhereUniqueInput | Prisma.OrderProductWhereUniqueInput[]
  disconnect?: Prisma.OrderProductWhereUniqueInput | Prisma.OrderProductWhereUniqueInput[]
  delete?: Prisma.OrderProductWhereUniqueInput | Prisma.OrderProductWhereUniqueInput[]
  connect?: Prisma.OrderProductWhereUniqueInput | Prisma.OrderProductWhereUniqueInput[]
  update?: Prisma.OrderProductUpdateWithWhereUniqueWithoutProductInput | Prisma.OrderProductUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.OrderProductUpdateManyWithWhereWithoutProductInput | Prisma.OrderProductUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.OrderProductScalarWhereInput | Prisma.OrderProductScalarWhereInput[]
}

export type OrderProductCreateNestedManyWithoutOrderInput = {
  create?: Prisma.XOR<Prisma.OrderProductCreateWithoutOrderInput, Prisma.OrderProductUncheckedCreateWithoutOrderInput> | Prisma.OrderProductCreateWithoutOrderInput[] | Prisma.OrderProductUncheckedCreateWithoutOrderInput[]
  connectOrCreate?: Prisma.OrderProductCreateOrConnectWithoutOrderInput | Prisma.OrderProductCreateOrConnectWithoutOrderInput[]
  createMany?: Prisma.OrderProductCreateManyOrderInputEnvelope
  connect?: Prisma.OrderProductWhereUniqueInput | Prisma.OrderProductWhereUniqueInput[]
}

export type OrderProductUncheckedCreateNestedManyWithoutOrderInput = {
  create?: Prisma.XOR<Prisma.OrderProductCreateWithoutOrderInput, Prisma.OrderProductUncheckedCreateWithoutOrderInput> | Prisma.OrderProductCreateWithoutOrderInput[] | Prisma.OrderProductUncheckedCreateWithoutOrderInput[]
  connectOrCreate?: Prisma.OrderProductCreateOrConnectWithoutOrderInput | Prisma.OrderProductCreateOrConnectWithoutOrderInput[]
  createMany?: Prisma.OrderProductCreateManyOrderInputEnvelope
  connect?: Prisma.OrderProductWhereUniqueInput | Prisma.OrderProductWhereUniqueInput[]
}

export type OrderProductUpdateManyWithoutOrderNestedInput = {
  create?: Prisma.XOR<Prisma.OrderProductCreateWithoutOrderInput, Prisma.OrderProductUncheckedCreateWithoutOrderInput> | Prisma.OrderProductCreateWithoutOrderInput[] | Prisma.OrderProductUncheckedCreateWithoutOrderInput[]
  connectOrCreate?: Prisma.OrderProductCreateOrConnectWithoutOrderInput | Prisma.OrderProductCreateOrConnectWithoutOrderInput[]
  upsert?: Prisma.OrderProductUpsertWithWhereUniqueWithoutOrderInput | Prisma.OrderProductUpsertWithWhereUniqueWithoutOrderInput[]
  createMany?: Prisma.OrderProductCreateManyOrderInputEnvelope
  set?: Prisma.OrderProductWhereUniqueInput | Prisma.OrderProductWhereUniqueInput[]
  disconnect?: Prisma.OrderProductWhereUniqueInput | Prisma.OrderProductWhereUniqueInput[]
  delete?: Prisma.OrderProductWhereUniqueInput | Prisma.OrderProductWhereUniqueInput[]
  connect?: Prisma.OrderProductWhereUniqueInput | Prisma.OrderProductWhereUniqueInput[]
  update?: Prisma.OrderProductUpdateWithWhereUniqueWithoutOrderInput | Prisma.OrderProductUpdateWithWhereUniqueWithoutOrderInput[]
  updateMany?: Prisma.OrderProductUpdateManyWithWhereWithoutOrderInput | Prisma.OrderProductUpdateManyWithWhereWithoutOrderInput[]
  deleteMany?: Prisma.OrderProductScalarWhereInput | Prisma.OrderProductScalarWhereInput[]
}

export type OrderProductUncheckedUpdateManyWithoutOrderNestedInput = {
  create?: Prisma.XOR<Prisma.OrderProductCreateWithoutOrderInput, Prisma.OrderProductUncheckedCreateWithoutOrderInput> | Prisma.OrderProductCreateWithoutOrderInput[] | Prisma.OrderProductUncheckedCreateWithoutOrderInput[]
  connectOrCreate?: Prisma.OrderProductCreateOrConnectWithoutOrderInput | Prisma.OrderProductCreateOrConnectWithoutOrderInput[]
  upsert?: Prisma.OrderProductUpsertWithWhereUniqueWithoutOrderInput | Prisma.OrderProductUpsertWithWhereUniqueWithoutOrderInput[]
  createMany?: Prisma.OrderProductCreateManyOrderInputEnvelope
  set?: Prisma.OrderProductWhereUniqueInput | Prisma.OrderProductWhereUniqueInput[]
  disconnect?: Prisma.OrderProductWhereUniqueInput | Prisma.OrderProductWhereUniqueInput[]
  delete?: Prisma.OrderProductWhereUniqueInput | Prisma.OrderProductWhereUniqueInput[]
  connect?: Prisma.OrderProductWhereUniqueInput | Prisma.OrderProductWhereUniqueInput[]
  update?: Prisma.OrderProductUpdateWithWhereUniqueWithoutOrderInput | Prisma.OrderProductUpdateWithWhereUniqueWithoutOrderInput[]
  updateMany?: Prisma.OrderProductUpdateManyWithWhereWithoutOrderInput | Prisma.OrderProductUpdateManyWithWhereWithoutOrderInput[]
  deleteMany?: Prisma.OrderProductScalarWhereInput | Prisma.OrderProductScalarWhereInput[]
}

export type OrderProductCreateWithoutProductInput = {
  id?: string
  quantity: number
  order: Prisma.OrderCreateNestedOneWithoutProductsInput
}

export type OrderProductUncheckedCreateWithoutProductInput = {
  id?: string
  orderId: string
  quantity: number
}

export type OrderProductCreateOrConnectWithoutProductInput = {
  where: Prisma.OrderProductWhereUniqueInput
  create: Prisma.XOR<Prisma.OrderProductCreateWithoutProductInput, Prisma.OrderProductUncheckedCreateWithoutProductInput>
}

export type OrderProductCreateManyProductInputEnvelope = {
  data: Prisma.OrderProductCreateManyProductInput | Prisma.OrderProductCreateManyProductInput[]
}

export type OrderProductUpsertWithWhereUniqueWithoutProductInput = {
  where: Prisma.OrderProductWhereUniqueInput
  update: Prisma.XOR<Prisma.OrderProductUpdateWithoutProductInput, Prisma.OrderProductUncheckedUpdateWithoutProductInput>
  create: Prisma.XOR<Prisma.OrderProductCreateWithoutProductInput, Prisma.OrderProductUncheckedCreateWithoutProductInput>
}

export type OrderProductUpdateWithWhereUniqueWithoutProductInput = {
  where: Prisma.OrderProductWhereUniqueInput
  data: Prisma.XOR<Prisma.OrderProductUpdateWithoutProductInput, Prisma.OrderProductUncheckedUpdateWithoutProductInput>
}

export type OrderProductUpdateManyWithWhereWithoutProductInput = {
  where: Prisma.OrderProductScalarWhereInput
  data: Prisma.XOR<Prisma.OrderProductUpdateManyMutationInput, Prisma.OrderProductUncheckedUpdateManyWithoutProductInput>
}

export type OrderProductScalarWhereInput = {
  AND?: Prisma.OrderProductScalarWhereInput | Prisma.OrderProductScalarWhereInput[]
  OR?: Prisma.OrderProductScalarWhereInput[]
  NOT?: Prisma.OrderProductScalarWhereInput | Prisma.OrderProductScalarWhereInput[]
  id?: Prisma.StringFilter<"OrderProduct"> | string
  orderId?: Prisma.StringFilter<"OrderProduct"> | string
  productId?: Prisma.StringFilter<"OrderProduct"> | string
  quantity?: Prisma.IntFilter<"OrderProduct"> | number
}

export type OrderProductCreateWithoutOrderInput = {
  id?: string
  quantity: number
  product: Prisma.ProductCreateNestedOneWithoutOrderProductsInput
}

export type OrderProductUncheckedCreateWithoutOrderInput = {
  id?: string
  productId: string
  quantity: number
}

export type OrderProductCreateOrConnectWithoutOrderInput = {
  where: Prisma.OrderProductWhereUniqueInput
  create: Prisma.XOR<Prisma.OrderProductCreateWithoutOrderInput, Prisma.OrderProductUncheckedCreateWithoutOrderInput>
}

export type OrderProductCreateManyOrderInputEnvelope = {
  data: Prisma.OrderProductCreateManyOrderInput | Prisma.OrderProductCreateManyOrderInput[]
}

export type OrderProductUpsertWithWhereUniqueWithoutOrderInput = {
  where: Prisma.OrderProductWhereUniqueInput
  update: Prisma.XOR<Prisma.OrderProductUpdateWithoutOrderInput, Prisma.OrderProductUncheckedUpdateWithoutOrderInput>
  create: Prisma.XOR<Prisma.OrderProductCreateWithoutOrderInput, Prisma.OrderProductUncheckedCreateWithoutOrderInput>
}

export type OrderProductUpdateWithWhereUniqueWithoutOrderInput = {
  where: Prisma.OrderProductWhereUniqueInput
  data: Prisma.XOR<Prisma.OrderProductUpdateWithoutOrderInput, Prisma.OrderProductUncheckedUpdateWithoutOrderInput>
}

export type OrderProductUpdateManyWithWhereWithoutOrderInput = {
  where: Prisma.OrderProductScalarWhereInput
  data: Prisma.XOR<Prisma.OrderProductUpdateManyMutationInput, Prisma.OrderProductUncheckedUpdateManyWithoutOrderInput>
}

export type OrderProductCreateManyProductInput = {
  id?: string
  orderId: string
  quantity: number
}

export type OrderProductUpdateWithoutProductInput = {
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  order?: Prisma.OrderUpdateOneRequiredWithoutProductsNestedInput
}

export type OrderProductUncheckedUpdateWithoutProductInput = {
  orderId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
}

export type OrderProductUncheckedUpdateManyWithoutProductInput = {
  orderId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
}

export type OrderProductCreateManyOrderInput = {
  id?: string
  productId: string
  quantity: number
}

export type OrderProductUpdateWithoutOrderInput = {
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  product?: Prisma.ProductUpdateOneRequiredWithoutOrderProductsNestedInput
}

export type OrderProductUncheckedUpdateWithoutOrderInput = {
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
}

export type OrderProductUncheckedUpdateManyWithoutOrderInput = {
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
}



export type OrderProductSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  orderId?: boolean
  productId?: boolean
  quantity?: boolean
  order?: boolean | Prisma.OrderDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["orderProduct"]>



export type OrderProductSelectScalar = {
  id?: boolean
  orderId?: boolean
  productId?: boolean
  quantity?: boolean
}

export type OrderProductOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "orderId" | "productId" | "quantity", ExtArgs["result"]["orderProduct"]>
export type OrderProductInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  order?: boolean | Prisma.OrderDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}

export type $OrderProductPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "OrderProduct"
  objects: {
    order: Prisma.$OrderPayload<ExtArgs>
    product: Prisma.$ProductPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    orderId: string
    productId: string
    quantity: number
  }, ExtArgs["result"]["orderProduct"]>
  composites: {}
}

export type OrderProductGetPayload<S extends boolean | null | undefined | OrderProductDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$OrderProductPayload, S>

export type OrderProductCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<OrderProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: OrderProductCountAggregateInputType | true
  }

export interface OrderProductDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderProduct'], meta: { name: 'OrderProduct' } }
  /**
   * Find zero or one OrderProduct that matches the filter.
   * @param {OrderProductFindUniqueArgs} args - Arguments to find a OrderProduct
   * @example
   * // Get one OrderProduct
   * const orderProduct = await prisma.orderProduct.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends OrderProductFindUniqueArgs>(args: Prisma.SelectSubset<T, OrderProductFindUniqueArgs<ExtArgs>>): Prisma.Prisma__OrderProductClient<runtime.Types.Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one OrderProduct that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {OrderProductFindUniqueOrThrowArgs} args - Arguments to find a OrderProduct
   * @example
   * // Get one OrderProduct
   * const orderProduct = await prisma.orderProduct.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends OrderProductFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, OrderProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__OrderProductClient<runtime.Types.Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first OrderProduct that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderProductFindFirstArgs} args - Arguments to find a OrderProduct
   * @example
   * // Get one OrderProduct
   * const orderProduct = await prisma.orderProduct.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends OrderProductFindFirstArgs>(args?: Prisma.SelectSubset<T, OrderProductFindFirstArgs<ExtArgs>>): Prisma.Prisma__OrderProductClient<runtime.Types.Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first OrderProduct that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderProductFindFirstOrThrowArgs} args - Arguments to find a OrderProduct
   * @example
   * // Get one OrderProduct
   * const orderProduct = await prisma.orderProduct.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends OrderProductFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, OrderProductFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__OrderProductClient<runtime.Types.Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more OrderProducts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderProductFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all OrderProducts
   * const orderProducts = await prisma.orderProduct.findMany()
   * 
   * // Get first 10 OrderProducts
   * const orderProducts = await prisma.orderProduct.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const orderProductWithIdOnly = await prisma.orderProduct.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends OrderProductFindManyArgs>(args?: Prisma.SelectSubset<T, OrderProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a OrderProduct.
   * @param {OrderProductCreateArgs} args - Arguments to create a OrderProduct.
   * @example
   * // Create one OrderProduct
   * const OrderProduct = await prisma.orderProduct.create({
   *   data: {
   *     // ... data to create a OrderProduct
   *   }
   * })
   * 
   */
  create<T extends OrderProductCreateArgs>(args: Prisma.SelectSubset<T, OrderProductCreateArgs<ExtArgs>>): Prisma.Prisma__OrderProductClient<runtime.Types.Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many OrderProducts.
   * @param {OrderProductCreateManyArgs} args - Arguments to create many OrderProducts.
   * @example
   * // Create many OrderProducts
   * const orderProduct = await prisma.orderProduct.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends OrderProductCreateManyArgs>(args?: Prisma.SelectSubset<T, OrderProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a OrderProduct.
   * @param {OrderProductDeleteArgs} args - Arguments to delete one OrderProduct.
   * @example
   * // Delete one OrderProduct
   * const OrderProduct = await prisma.orderProduct.delete({
   *   where: {
   *     // ... filter to delete one OrderProduct
   *   }
   * })
   * 
   */
  delete<T extends OrderProductDeleteArgs>(args: Prisma.SelectSubset<T, OrderProductDeleteArgs<ExtArgs>>): Prisma.Prisma__OrderProductClient<runtime.Types.Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one OrderProduct.
   * @param {OrderProductUpdateArgs} args - Arguments to update one OrderProduct.
   * @example
   * // Update one OrderProduct
   * const orderProduct = await prisma.orderProduct.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends OrderProductUpdateArgs>(args: Prisma.SelectSubset<T, OrderProductUpdateArgs<ExtArgs>>): Prisma.Prisma__OrderProductClient<runtime.Types.Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more OrderProducts.
   * @param {OrderProductDeleteManyArgs} args - Arguments to filter OrderProducts to delete.
   * @example
   * // Delete a few OrderProducts
   * const { count } = await prisma.orderProduct.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends OrderProductDeleteManyArgs>(args?: Prisma.SelectSubset<T, OrderProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more OrderProducts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderProductUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many OrderProducts
   * const orderProduct = await prisma.orderProduct.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends OrderProductUpdateManyArgs>(args: Prisma.SelectSubset<T, OrderProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one OrderProduct.
   * @param {OrderProductUpsertArgs} args - Arguments to update or create a OrderProduct.
   * @example
   * // Update or create a OrderProduct
   * const orderProduct = await prisma.orderProduct.upsert({
   *   create: {
   *     // ... data to create a OrderProduct
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the OrderProduct we want to update
   *   }
   * })
   */
  upsert<T extends OrderProductUpsertArgs>(args: Prisma.SelectSubset<T, OrderProductUpsertArgs<ExtArgs>>): Prisma.Prisma__OrderProductClient<runtime.Types.Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more OrderProducts that matches the filter.
   * @param {OrderProductFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const orderProduct = await prisma.orderProduct.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.OrderProductFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a OrderProduct.
   * @param {OrderProductAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const orderProduct = await prisma.orderProduct.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.OrderProductAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of OrderProducts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderProductCountArgs} args - Arguments to filter OrderProducts to count.
   * @example
   * // Count the number of OrderProducts
   * const count = await prisma.orderProduct.count({
   *   where: {
   *     // ... the filter for the OrderProducts we want to count
   *   }
   * })
  **/
  count<T extends OrderProductCountArgs>(
    args?: Prisma.Subset<T, OrderProductCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], OrderProductCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a OrderProduct.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends OrderProductAggregateArgs>(args: Prisma.Subset<T, OrderProductAggregateArgs>): Prisma.PrismaPromise<GetOrderProductAggregateType<T>>

  /**
   * Group by OrderProduct.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderProductGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends OrderProductGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: OrderProductGroupByArgs['orderBy'] }
      : { orderBy?: OrderProductGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, OrderProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the OrderProduct model
 */
readonly fields: OrderProductFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for OrderProduct.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__OrderProductClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  order<T extends Prisma.OrderDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrderDefaultArgs<ExtArgs>>): Prisma.Prisma__OrderClient<runtime.Types.Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  product<T extends Prisma.ProductDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductDefaultArgs<ExtArgs>>): Prisma.Prisma__ProductClient<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the OrderProduct model
 */
export interface OrderProductFieldRefs {
  readonly id: Prisma.FieldRef<"OrderProduct", 'String'>
  readonly orderId: Prisma.FieldRef<"OrderProduct", 'String'>
  readonly productId: Prisma.FieldRef<"OrderProduct", 'String'>
  readonly quantity: Prisma.FieldRef<"OrderProduct", 'Int'>
}
    

// Custom InputTypes
/**
 * OrderProduct findUnique
 */
export type OrderProductFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderProduct
   */
  select?: Prisma.OrderProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderProduct
   */
  omit?: Prisma.OrderProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderProductInclude<ExtArgs> | null
  /**
   * Filter, which OrderProduct to fetch.
   */
  where: Prisma.OrderProductWhereUniqueInput
}

/**
 * OrderProduct findUniqueOrThrow
 */
export type OrderProductFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderProduct
   */
  select?: Prisma.OrderProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderProduct
   */
  omit?: Prisma.OrderProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderProductInclude<ExtArgs> | null
  /**
   * Filter, which OrderProduct to fetch.
   */
  where: Prisma.OrderProductWhereUniqueInput
}

/**
 * OrderProduct findFirst
 */
export type OrderProductFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderProduct
   */
  select?: Prisma.OrderProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderProduct
   */
  omit?: Prisma.OrderProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderProductInclude<ExtArgs> | null
  /**
   * Filter, which OrderProduct to fetch.
   */
  where?: Prisma.OrderProductWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrderProducts to fetch.
   */
  orderBy?: Prisma.OrderProductOrderByWithRelationInput | Prisma.OrderProductOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for OrderProducts.
   */
  cursor?: Prisma.OrderProductWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrderProducts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrderProducts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of OrderProducts.
   */
  distinct?: Prisma.OrderProductScalarFieldEnum | Prisma.OrderProductScalarFieldEnum[]
}

/**
 * OrderProduct findFirstOrThrow
 */
export type OrderProductFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderProduct
   */
  select?: Prisma.OrderProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderProduct
   */
  omit?: Prisma.OrderProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderProductInclude<ExtArgs> | null
  /**
   * Filter, which OrderProduct to fetch.
   */
  where?: Prisma.OrderProductWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrderProducts to fetch.
   */
  orderBy?: Prisma.OrderProductOrderByWithRelationInput | Prisma.OrderProductOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for OrderProducts.
   */
  cursor?: Prisma.OrderProductWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrderProducts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrderProducts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of OrderProducts.
   */
  distinct?: Prisma.OrderProductScalarFieldEnum | Prisma.OrderProductScalarFieldEnum[]
}

/**
 * OrderProduct findMany
 */
export type OrderProductFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderProduct
   */
  select?: Prisma.OrderProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderProduct
   */
  omit?: Prisma.OrderProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderProductInclude<ExtArgs> | null
  /**
   * Filter, which OrderProducts to fetch.
   */
  where?: Prisma.OrderProductWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrderProducts to fetch.
   */
  orderBy?: Prisma.OrderProductOrderByWithRelationInput | Prisma.OrderProductOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing OrderProducts.
   */
  cursor?: Prisma.OrderProductWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrderProducts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrderProducts.
   */
  skip?: number
  distinct?: Prisma.OrderProductScalarFieldEnum | Prisma.OrderProductScalarFieldEnum[]
}

/**
 * OrderProduct create
 */
export type OrderProductCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderProduct
   */
  select?: Prisma.OrderProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderProduct
   */
  omit?: Prisma.OrderProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderProductInclude<ExtArgs> | null
  /**
   * The data needed to create a OrderProduct.
   */
  data: Prisma.XOR<Prisma.OrderProductCreateInput, Prisma.OrderProductUncheckedCreateInput>
}

/**
 * OrderProduct createMany
 */
export type OrderProductCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many OrderProducts.
   */
  data: Prisma.OrderProductCreateManyInput | Prisma.OrderProductCreateManyInput[]
}

/**
 * OrderProduct update
 */
export type OrderProductUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderProduct
   */
  select?: Prisma.OrderProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderProduct
   */
  omit?: Prisma.OrderProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderProductInclude<ExtArgs> | null
  /**
   * The data needed to update a OrderProduct.
   */
  data: Prisma.XOR<Prisma.OrderProductUpdateInput, Prisma.OrderProductUncheckedUpdateInput>
  /**
   * Choose, which OrderProduct to update.
   */
  where: Prisma.OrderProductWhereUniqueInput
}

/**
 * OrderProduct updateMany
 */
export type OrderProductUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update OrderProducts.
   */
  data: Prisma.XOR<Prisma.OrderProductUpdateManyMutationInput, Prisma.OrderProductUncheckedUpdateManyInput>
  /**
   * Filter which OrderProducts to update
   */
  where?: Prisma.OrderProductWhereInput
  /**
   * Limit how many OrderProducts to update.
   */
  limit?: number
}

/**
 * OrderProduct upsert
 */
export type OrderProductUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderProduct
   */
  select?: Prisma.OrderProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderProduct
   */
  omit?: Prisma.OrderProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderProductInclude<ExtArgs> | null
  /**
   * The filter to search for the OrderProduct to update in case it exists.
   */
  where: Prisma.OrderProductWhereUniqueInput
  /**
   * In case the OrderProduct found by the `where` argument doesn't exist, create a new OrderProduct with this data.
   */
  create: Prisma.XOR<Prisma.OrderProductCreateInput, Prisma.OrderProductUncheckedCreateInput>
  /**
   * In case the OrderProduct was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.OrderProductUpdateInput, Prisma.OrderProductUncheckedUpdateInput>
}

/**
 * OrderProduct delete
 */
export type OrderProductDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderProduct
   */
  select?: Prisma.OrderProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderProduct
   */
  omit?: Prisma.OrderProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderProductInclude<ExtArgs> | null
  /**
   * Filter which OrderProduct to delete.
   */
  where: Prisma.OrderProductWhereUniqueInput
}

/**
 * OrderProduct deleteMany
 */
export type OrderProductDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which OrderProducts to delete
   */
  where?: Prisma.OrderProductWhereInput
  /**
   * Limit how many OrderProducts to delete.
   */
  limit?: number
}

/**
 * OrderProduct findRaw
 */
export type OrderProductFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * OrderProduct aggregateRaw
 */
export type OrderProductAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * OrderProduct without action
 */
export type OrderProductDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderProduct
   */
  select?: Prisma.OrderProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderProduct
   */
  omit?: Prisma.OrderProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderProductInclude<ExtArgs> | null
}
